Fichier: src\main\java\com\example\stage\model\CV.java
Chemin complet: C:\Users\Sh-Pc\Desktop\HomeFORNOW\KHEDMA\src\main\java\com\example\stage\model\CV.java
-----
package com.example.stage.model;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

public class CV {
    // Added field for ESPRIT specific programs
    public enum ProgramType {
        ENGINEERING_IT("GÃ©nie Informatique"),
        ENGINEERING_TELECOM("GÃ©nie des TÃ©lÃ©communications"),
        ENGINEERING_ELECTROMECH("GÃ©nie Ã‰lectromÃ©canique"),
        ENGINEERING_CIVIL("GÃ©nie Civil"),
        ENGINEERING_MECHATRONICS("GÃ©nie MÃ©catronique"),
        LICENSE_BUSINESS_COMPUTING("Licence en Business Computing"),
        LICENSE_MATH_APPLIED("Licence en MathÃ©matiques AppliquÃ©es"),
        LICENSE_MANAGEMENT("Licence en Sciences de Gestion"),
        MASTER_BUSINESS_ANALYTICS("Master en Business Analytics"),
        MASTER_CCA("Master en ComptabilitÃ©, ContrÃ´le, Audit"),
        MASTER_MDSI("Master en Management Digital et SystÃ¨mes d'Information"),
        MASTER_MKD("Master en Marketing Digital"),
        MASTER_FIND("Master en Finance Digitale"),
        MASTER_GAMMA("Master en Gestion Actuarielle et ModÃ©lisation MathÃ©matique");

        private final String displayName;

        ProgramType(String displayName) {
            this.displayName = displayName;
        }

        public String getDisplayName() {
            return displayName;
        }
    }

    // Private fields
    private String name;
    private String email;
    private String phone;
    private String address;
    private String linkedin;
    private String portfolio;
    private String summary;
    private ProgramType programType;
    private String institution; // ESPRIT or ESPRIM
    private LocalDateTime lastUpdated;
    private List<Education> educations;
    private List<WorkExperience> workExperiences;
    private List<Project> projects;
    private List<Certificate> certificates;
    private List<Language> languages;
    private List<String> skills;

    // Constructors
    public CV() {
        this.educations = new ArrayList<>();
        this.workExperiences = new ArrayList<>();
        this.projects = new ArrayList<>();
        this.certificates = new ArrayList<>();
        this.languages = new ArrayList<>();
        this.skills = new ArrayList<>();
        this.lastUpdated = LocalDateTime.now();
    }

    public CV(String name, String email, String phone, String address, ProgramType programType) {
        this();
        this.name = name;
        this.email = email;
        this.phone = phone;
        this.address = address;
        this.programType = programType;
    }

    // Getters and Setters
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
        updateLastModified();
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
        updateLastModified();
    }

    public String getPhone() {
        return phone;
    }

    public void setPhone(String phone) {
        this.phone = phone;
        updateLastModified();
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
        updateLastModified();
    }

    public String getLinkedin() {
        return linkedin;
    }

    public void setLinkedin(String linkedin) {
        this.linkedin = linkedin;
        updateLastModified();
    }

    public String getPortfolio() {
        return portfolio;
    }

    public void setPortfolio(String portfolio) {
        this.portfolio = portfolio;
        updateLastModified();
    }

    public String getSummary() {
        return summary;
    }

    public void setSummary(String summary) {
        this.summary = summary;
        updateLastModified();
    }

    public ProgramType getProgramType() {
        return programType;
    }

    public void setProgramType(ProgramType programType) {
        this.programType = programType;
        updateLastModified();
    }

    public String getInstitution() {
        return institution;
    }

    public void setInstitution(String institution) {
        if (institution != null && (institution.equals("ESPRIT") || institution.equals("ESPRIM"))) {
            this.institution = institution;
            updateLastModified();
        } else {
            throw new IllegalArgumentException("Institution must be either ESPRIT or ESPRIM");
        }
    }

    public LocalDateTime getLastUpdated() {
        return lastUpdated;
    }

    public List<Education> getEducations() {
        return new ArrayList<>(educations);
    }

    public void setEducations(List<Education> educations) {
        this.educations = new ArrayList<>(educations);
        updateLastModified();
    }

    public List<WorkExperience> getWorkExperiences() {
        return new ArrayList<>(workExperiences);
    }

    public void setWorkExperiences(List<WorkExperience> workExperiences) {
        this.workExperiences = new ArrayList<>(workExperiences);
        updateLastModified();
    }

    public List<Project> getProjects() {
        return new ArrayList<>(projects);
    }

    public void setProjects(List<Project> projects) {
        this.projects = new ArrayList<>(projects);
        updateLastModified();
    }

    public List<Certificate> getCertificates() {
        return new ArrayList<>(certificates);
    }

    public void setCertificates(List<Certificate> certificates) {
        this.certificates = new ArrayList<>(certificates);
        updateLastModified();
    }

    public List<Language> getLanguages() {
        return new ArrayList<>(languages);
    }

    public void setLanguages(List<Language> languages) {
        this.languages = new ArrayList<>(languages);
        updateLastModified();
    }

    public List<String> getSkills() {
        return new ArrayList<>(skills);
    }

    public void setSkills(List<String> skills) {
        this.skills = new ArrayList<>(skills);
        updateLastModified();
    }

    // Methods to add elements
    public void addEducation(Education education) {
        if (education != null) {
            this.educations.add(education);
            updateLastModified();
        }
    }

    public void addWorkExperience(WorkExperience experience) {
        if (experience != null) {
            this.workExperiences.add(experience);
            updateLastModified();
        }
    }

    public void addProject(Project project) {
        if (project != null) {
            this.projects.add(project);
            updateLastModified();
        }
    }

    public void addCertificate(Certificate certificate) {
        if (certificate != null) {
            this.certificates.add(certificate);
            updateLastModified();
        }
    }

    public void addLanguage(Language language) {
        if (language != null) {
            this.languages.add(language);
            updateLastModified();
        }
    }

    public void addSkill(String skill) {
        if (skill != null && !skill.trim().isEmpty()) {
            this.skills.add(skill.trim());
            updateLastModified();
        }
    }

    // Methods to remove elements
    public void removeEducation(Education education) {
        if (this.educations.remove(education)) {
            updateLastModified();
        }
    }

    public void removeWorkExperience(WorkExperience experience) {
        if (this.workExperiences.remove(experience)) {
            updateLastModified();
        }
    }

    public void removeProject(Project project) {
        if (this.projects.remove(project)) {
            updateLastModified();
        }
    }

    public void removeCertificate(Certificate certificate) {
        if (this.certificates.remove(certificate)) {
            updateLastModified();
        }
    }

    public void removeLanguage(Language language) {
        if (this.languages.remove(language)) {
            updateLastModified();
        }
    }

    public void removeSkill(String skill) {
        if (this.skills.remove(skill)) {
            updateLastModified();
        }
    }

    // Utility method to update last modified date
    private void updateLastModified() {
        this.lastUpdated = LocalDateTime.now();
    }

    // Validation methods
    public boolean isValid() {
        return name != null && !name.trim().isEmpty() &&
                email != null && !email.trim().isEmpty() &&
                phone != null && !phone.trim().isEmpty() &&
                address != null && !address.trim().isEmpty() &&
                programType != null &&
                institution != null &&
                !educations.isEmpty() &&
                !workExperiences.isEmpty() &&
                !skills.isEmpty();
    }

    public boolean meetsRequirements() {
        boolean hasRelevantEducation = educations.stream()
                .anyMatch(edu -> edu.getInstitution().contains("ESPRIT") ||
                        edu.getInstitution().contains("ESPRIM"));

        boolean hasRelevantSkills = false;
        if (programType != null) {
            switch (programType) {
                case ENGINEERING_IT:
                case ENGINEERING_TELECOM:
                    hasRelevantSkills = skills.stream()
                            .anyMatch(skill -> skill.toLowerCase().contains("programming") ||
                                    skill.toLowerCase().contains("development") ||
                                    skill.toLowerCase().contains("software"));
                    break;
                case ENGINEERING_ELECTROMECH:
                case ENGINEERING_MECHATRONICS:
                    hasRelevantSkills = skills.stream()
                            .anyMatch(skill -> skill.toLowerCase().contains("mechanical") ||
                                    skill.toLowerCase().contains("electronics") ||
                                    skill.toLowerCase().contains("automation"));
                    break;
                case ENGINEERING_CIVIL:
                    hasRelevantSkills = skills.stream()
                            .anyMatch(skill -> skill.toLowerCase().contains("construction") ||
                                    skill.toLowerCase().contains("structural") ||
                                    skill.toLowerCase().contains("civil engineering"));
                    break;
                default:
                    hasRelevantSkills = true;
            }
        }

        return hasRelevantEducation && hasRelevantSkills;
    }

    // Override methods
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        CV cv = (CV) o;
        return Objects.equals(email, cv.email) &&
                Objects.equals(phone, cv.phone) &&
                Objects.equals(name, cv.name);
    }

    @Override
    public int hashCode() {
        return Objects.hash(email, phone, name);
    }

    @Override
    public String toString() {
        return "CV{" +
                "name='" + name + '\'' +
                ", email='" + email + '\'' +
                ", phone='" + phone + '\'' +
                ", address='" + address + '\'' +
                ", programType=" + (programType != null ? programType.getDisplayName() : "Not specified") +
                ", institution='" + institution + '\'' +
                ", numberOfEducations=" + educations.size() +
                ", numberOfWorkExperiences=" + workExperiences.size() +
                ", numberOfProjects=" + projects.size() +
                ", numberOfCertificates=" + certificates.size() +
                ", numberOfLanguages=" + languages.size() +
                ", numberOfSkills=" + skills.size() +
                ", lastUpdated=" + lastUpdated +
                '}';
    }

    // Clone method
    @Override
    public CV clone() {
        CV clone = new CV();
        clone.setName(this.name);
        clone.setEmail(this.email);
        clone.setPhone(this.phone);
        clone.setAddress(this.address);
        clone.setLinkedin(this.linkedin);
        clone.setPortfolio(this.portfolio);
        clone.setSummary(this.summary);
        clone.setProgramType(this.programType);
        clone.setInstitution(this.institution);
        clone.setEducations(new ArrayList<>(this.educations));
        clone.setWorkExperiences(new ArrayList<>(this.workExperiences));
        clone.setProjects(new ArrayList<>(this.projects));
        clone.setCertificates(new ArrayList<>(this.certificates));
        clone.setLanguages(new ArrayList<>(this.languages));
        clone.setSkills(new ArrayList<>(this.skills));
        return clone;
    }
}
==================================================

Fichier: src\main\java\com\example\stage\model\Education.java
Chemin complet: C:\Users\Sh-Pc\Desktop\HomeFORNOW\KHEDMA\src\main\java\com\example\stage\model\Education.java
-----
package com.example.stage.model;

import java.time.LocalDate;
import java.util.Objects;

public class Education {
    // Constants for institutions
    public static final String ESPRIT = "ESPRIT - Ã‰cole SupÃ©rieure PrivÃ©e d'IngÃ©nierie et de Technologies";
    public static final String ESPRIM = "ESPRIM - Ã‰cole SupÃ©rieure PrivÃ©e d'IngÃ©nierie et de Management";
    public static final String ESB = "ESPRIT School of Business";

    // Validation constants
    private static final int MIN_DEGREE_LENGTH = 2;
    private static final int MAX_DEGREE_LENGTH = 100;
    private static final int MIN_INSTITUTION_LENGTH = 2;
    private static final int MAX_INSTITUTION_LENGTH = 200;

    // Education level enum
    public enum EducationLevel {
        ENGINEERING("IngÃ©nieur"),
        LICENSE("Licence"),
        MASTER("Master"),
        OTHER("Autre");

        private final String displayName;

        EducationLevel(String displayName) {
            this.displayName = displayName;
        }

        public String getDisplayName() {
            return displayName;
        }
    }

    // Engineering specializations enum
    public enum EngineeringSpecialization {
        IT("GÃ©nie Informatique"),
        TELECOM("GÃ©nie des TÃ©lÃ©communications"),
        ELECTROMECH("GÃ©nie Ã‰lectromÃ©canique"),
        CIVIL("GÃ©nie Civil"),
        MECHATRONICS("GÃ©nie MÃ©catronique");

        private final String displayName;

        EngineeringSpecialization(String displayName) {
            this.displayName = displayName;
        }

        public String getDisplayName() {
            return displayName;
        }
    }

    // Private fields
    private String degree;
    private String institution;
    private LocalDate startDate;
    private LocalDate graduationDate;
    private String description;
    private double gpa;
    private boolean isOngoing;
    private String location;
    private EducationLevel level;
    private EngineeringSpecialization specialization;
    private String promotionYear;
    private String achievements;

    // Constructors
    public Education() {
        this.isOngoing = false;
    }

    public Education(String degree, String institution, LocalDate graduationDate, EducationLevel level) {
        this();
        setDegree(degree);
        setInstitution(institution);
        setGraduationDate(graduationDate);
        setLevel(level);
    }

    public Education(String degree, String institution, LocalDate startDate,
                     LocalDate graduationDate, EducationLevel level,
                     EngineeringSpecialization specialization) {
        this(degree, institution, graduationDate, level);
        setStartDate(startDate);
        setSpecialization(specialization);
    }

    // Getters and Setters
    public String getDegree() {
        return degree;
    }

    public void setDegree(String degree) {
        if (degree == null || degree.trim().isEmpty()) {
            throw new IllegalArgumentException("Degree cannot be null or empty");
        }
        if (degree.length() < MIN_DEGREE_LENGTH || degree.length() > MAX_DEGREE_LENGTH) {
            throw new IllegalArgumentException("Degree length must be between " +
                    MIN_DEGREE_LENGTH + " and " + MAX_DEGREE_LENGTH + " characters");
        }
        this.degree = degree.trim();
        updateDescription();
    }

    public String getInstitution() {
        return institution;
    }

    public void setInstitution(String institution) {
        if (institution == null || institution.trim().isEmpty()) {
            throw new IllegalArgumentException("Institution cannot be null or empty");
        }
        if (institution.length() < MIN_INSTITUTION_LENGTH ||
                institution.length() > MAX_INSTITUTION_LENGTH) {
            throw new IllegalArgumentException("Institution length must be between " +
                    MIN_INSTITUTION_LENGTH + " and " + MAX_INSTITUTION_LENGTH + " characters");
        }
        if (!institution.equals(ESPRIT) && !institution.equals(ESPRIM) && !institution.equals(ESB)) {
            throw new IllegalArgumentException("Institution must be one of ESPRIT's institutions");
        }
        this.institution = institution.trim();
        updateDescription();
    }

    public LocalDate getStartDate() {
        return startDate;
    }

    public void setStartDate(LocalDate startDate) {
        if (startDate != null && graduationDate != null && graduationDate.isBefore(startDate)) {
            throw new IllegalArgumentException("Start date cannot be after graduation date");
        }
        this.startDate = startDate;
        updateDescription();
    }

    public LocalDate getGraduationDate() {
        return graduationDate;
    }

    public void setGraduationDate(LocalDate graduationDate) {
        if (graduationDate != null && startDate != null && graduationDate.isBefore(startDate)) {
            throw new IllegalArgumentException("Graduation date cannot be before start date");
        }
        this.graduationDate = graduationDate;
        this.isOngoing = (graduationDate == null || graduationDate.isAfter(LocalDate.now()));
        updateDescription();
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description != null ? description.trim() : null;
    }

    public double getGpa() {
        return gpa;
    }

    public void setGpa(double gpa) {
        if (gpa < 0.0 || gpa > 20.0) { // Using French grading system (0-20)
            throw new IllegalArgumentException("GPA must be between 0.0 and 20.0");
        }
        this.gpa = gpa;
        updateDescription();
    }

    public boolean isOngoing() {
        return isOngoing;
    }

    public void setOngoing(boolean ongoing) {
        isOngoing = ongoing;
        if (ongoing) {
            graduationDate = null;
        }
        updateDescription();
    }

    public String getLocation() {
        return location;
    }

    public void setLocation(String location) {
        this.location = location != null ? location.trim() : null;
        updateDescription();
    }

    public EducationLevel getLevel() {
        return level;
    }

    public void setLevel(EducationLevel level) {
        if (level == null) {
            throw new IllegalArgumentException("Education level cannot be null");
        }
        this.level = level;
        updateDescription();
    }

    public EngineeringSpecialization getSpecialization() {
        return specialization;
    }

    public void setSpecialization(EngineeringSpecialization specialization) {
        if (level == EducationLevel.ENGINEERING && specialization == null) {
            throw new IllegalArgumentException("Specialization is required for engineering level");
        }
        this.specialization = specialization;
        updateDescription();
    }

    public String getPromotionYear() {
        return promotionYear;
    }

    public void setPromotionYear(String promotionYear) {
        this.promotionYear = promotionYear;
        updateDescription();
    }

    public String getAchievements() {
        return achievements;
    }

    public void setAchievements(String achievements) {
        this.achievements = achievements;
        updateDescription();
    }

    // Utility methods
    public String getDuration() {
        if (startDate == null) {
            return "Date non spÃ©cifiÃ©e";
        }

        LocalDate endDate = isOngoing ? LocalDate.now() : graduationDate;
        if (endDate == null) {
            return "En cours depuis " + startDate.getYear();
        }

        return startDate.getYear() + " - " + endDate.getYear();
    }

    private void updateDescription() {
        if (level != null && institution != null) {
            StringBuilder desc = new StringBuilder();
            desc.append(level.getDisplayName());

            if (specialization != null) {
                desc.append(" en ").append(specialization.getDisplayName());
            }

            desc.append(" Ã  ").append(institution);

            if (startDate != null) {
                desc.append(" (").append(getDuration()).append(")");
            }

            if (gpa > 0.0) {
                desc.append(" - Moyenne: ").append(String.format("%.2f", gpa));
            }

            if (promotionYear != null && !promotionYear.isEmpty()) {
                desc.append(" - Promotion ").append(promotionYear);
            }

            this.description = desc.toString();
        }
    }

    public boolean isValid() {
        boolean basicValidation = degree != null && !degree.trim().isEmpty() &&
                institution != null && !institution.trim().isEmpty() &&
                level != null &&
                (graduationDate != null || isOngoing) &&
                (startDate == null || graduationDate == null || !graduationDate.isBefore(startDate));

        if (!basicValidation) return false;

        // Additional validation for engineering level
        if (level == EducationLevel.ENGINEERING) {
            return specialization != null;
        }

        return true;
    }

    // Override methods
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Education education = (Education) o;
        return Objects.equals(degree, education.degree) &&
                Objects.equals(institution, education.institution) &&
                Objects.equals(graduationDate, education.graduationDate) &&
                Objects.equals(level, education.level) &&
                Objects.equals(specialization, education.specialization);
    }

    @Override
    public int hashCode() {
        return Objects.hash(degree, institution, graduationDate, level, specialization);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(level.getDisplayName());
        if (specialization != null) {
            sb.append(" en ").append(specialization.getDisplayName());
        }
        sb.append(" Ã  ").append(institution);

        if (startDate != null) {
            sb.append(" (").append(getDuration()).append(")");
        }

        if (gpa > 0.0) {
            sb.append(" - Moyenne: ").append(String.format("%.2f", gpa));
        }

        if (location != null && !location.isEmpty()) {
            sb.append(" - ").append(location);
        }

        return sb.toString();
    }

    // Clone method
    @Override
    public Education clone() {
        Education clone = new Education();
        clone.degree = this.degree;
        clone.institution = this.institution;
        clone.startDate = this.startDate;
        clone.graduationDate = this.graduationDate;
        clone.description = this.description;
        clone.gpa = this.gpa;
        clone.isOngoing = this.isOngoing;
        clone.location = this.location;
        clone.level = this.level;
        clone.specialization = this.specialization;
        clone.promotionYear = this.promotionYear;
        clone.achievements = this.achievements;
        return clone;
    }
}
==================================================

Fichier: src\main\java\com\example\stage\model\Certificate.java
Chemin complet: C:\Users\Sh-Pc\Desktop\HomeFORNOW\KHEDMA\src\main\java\com\example\stage\model\Certificate.java
-----
package com.example.stage.model;

import java.time.LocalDate;
import java.util.Objects;

public class Certificate {
    // Constants for validation
    private static final int MIN_NAME_LENGTH = 2;
    private static final int MAX_NAME_LENGTH = 200;
    private static final int MIN_INSTITUTION_LENGTH = 2;
    private static final int MAX_INSTITUTION_LENGTH = 100;

    // Certificate types for ESPRIT programs
    public enum CertificateType {
        TECHNICAL("Certification Technique"),
        ACADEMIC("Certification AcadÃ©mique"),
        PROFESSIONAL("Certification Professionnelle"),
        LANGUAGE("Certification Linguistique"),
        SOFT_SKILLS("Certification Soft Skills"),
        ESPRIT_INTERNAL("Certification ESPRIT");

        private final String displayName;

        CertificateType(String displayName) {
            this.displayName = displayName;
        }

        public String getDisplayName() {
            return displayName;
        }
    }

    // Private fields
    private String name;
    private String institution;
    private LocalDate dateReceived;
    private LocalDate expirationDate;
    private String credentialId;
    private String credentialUrl;
    private String description;
    private boolean isExpirable;
    private CertificateType type;
    private double score;
    private String level;
    private boolean isVerified;
    private String verificationUrl;

    // Constructors
    public Certificate(String name, String institution, LocalDate dateReceived, CertificateType type) {
        setName(name);
        setInstitution(institution);
        setDateReceived(dateReceived);
        setType(type);
        this.isExpirable = false;
        this.isVerified = false;
    }

    public Certificate(String name, String institution, LocalDate dateReceived,
                       LocalDate expirationDate, String credentialId,
                       String credentialUrl, CertificateType type) {
        this(name, institution, dateReceived, type);
        setExpirationDate(expirationDate);
        setCredentialId(credentialId);
        setCredentialUrl(credentialUrl);
    }

    // Getters and Setters with validation
    public String getName() {
        return name;
    }

    public void setName(String name) {
        if (name == null || name.trim().isEmpty()) {
            throw new IllegalArgumentException("Certificate name cannot be null or empty");
        }
        if (name.length() < MIN_NAME_LENGTH || name.length() > MAX_NAME_LENGTH) {
            throw new IllegalArgumentException("Certificate name length must be between " +
                    MIN_NAME_LENGTH + " and " + MAX_NAME_LENGTH + " characters");
        }
        this.name = name.trim();
    }

    public String getInstitution() {
        return institution;
    }

    public void setInstitution(String institution) {
        if (institution == null || institution.trim().isEmpty()) {
            throw new IllegalArgumentException("Institution name cannot be null or empty");
        }
        if (institution.length() < MIN_INSTITUTION_LENGTH ||
                institution.length() > MAX_INSTITUTION_LENGTH) {
            throw new IllegalArgumentException("Institution name length must be between " +
                    MIN_INSTITUTION_LENGTH + " and " + MAX_INSTITUTION_LENGTH + " characters");
        }
        this.institution = institution.trim();
    }

    public LocalDate getDateReceived() {
        return dateReceived;
    }

    public void setDateReceived(LocalDate dateReceived) {
        if (dateReceived == null) {
            throw new IllegalArgumentException("Date received cannot be null");
        }
        if (dateReceived.isAfter(LocalDate.now())) {
            throw new IllegalArgumentException("Date received cannot be in the future");
        }
        if (expirationDate != null && dateReceived.isAfter(expirationDate)) {
            throw new IllegalArgumentException("Date received cannot be after expiration date");
        }
        this.dateReceived = dateReceived;
    }

    public LocalDate getExpirationDate() {
        return expirationDate;
    }

    public void setExpirationDate(LocalDate expirationDate) {
        if (expirationDate != null) {
            if (dateReceived != null && expirationDate.isBefore(dateReceived)) {
                throw new IllegalArgumentException("Expiration date cannot be before date received");
            }
            this.isExpirable = true;
        }
        this.expirationDate = expirationDate;
    }

    public String getCredentialId() {
        return credentialId;
    }

    public void setCredentialId(String credentialId) {
        this.credentialId = credentialId != null ? credentialId.trim() : null;
    }

    public String getCredentialUrl() {
        return credentialUrl;
    }

    public void setCredentialUrl(String credentialUrl) {
        this.credentialUrl = credentialUrl != null ? credentialUrl.trim() : null;
        if (credentialUrl != null) {
            this.isVerified = true;
        }
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description != null ? description.trim() : null;
    }

    public CertificateType getType() {
        return type;
    }

    public void setType(CertificateType type) {
        if (type == null) {
            throw new IllegalArgumentException("Certificate type cannot be null");
        }
        this.type = type;
    }

    public double getScore() {
        return score;
    }

    public void setScore(double score) {
        if (score < 0.0 || score > 100.0) {
            throw new IllegalArgumentException("Score must be between 0 and 100");
        }
        this.score = score;
    }

    public String getLevel() {
        return level;
    }

    public void setLevel(String level) {
        this.level = level != null ? level.trim() : null;
    }

    public boolean isVerified() {
        return isVerified;
    }

    public void setVerified(boolean verified) {
        isVerified = verified;
    }

    public String getVerificationUrl() {
        return verificationUrl;
    }

    public void setVerificationUrl(String verificationUrl) {
        this.verificationUrl = verificationUrl;
        if (verificationUrl != null && !verificationUrl.trim().isEmpty()) {
            this.isVerified = true;
        }
    }

    // Utility methods
    public boolean isExpired() {
        if (!isExpirable || expirationDate == null) {
            return false;
        }
        return expirationDate.isBefore(LocalDate.now());
    }

    public String getStatus() {
        if (!isExpirable) {
            return "Pas d'expiration";
        }
        return isExpired() ? "ExpirÃ©" : "Valide";
    }

    public boolean isValid() {
        return name != null && !name.trim().isEmpty() &&
                institution != null && !institution.trim().isEmpty() &&
                dateReceived != null &&
                type != null &&
                (expirationDate == null || !expirationDate.isBefore(dateReceived));
    }

    // Override methods
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Certificate that = (Certificate) o;
        return Objects.equals(name, that.name) &&
                Objects.equals(institution, that.institution) &&
                Objects.equals(dateReceived, that.dateReceived) &&
                Objects.equals(credentialId, that.credentialId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(name, institution, dateReceived, credentialId);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(type.getDisplayName())
                .append(": ")
                .append(name)
                .append(" - ")
                .append(institution)
                .append(" (")
                .append(getDateReceivedString());

        if (isExpirable) {
            sb.append(", ").append(getStatus());
        }

        if (score > 0.0) {
            sb.append(", Score: ").append(String.format("%.1f", score));
        }

        if (level != null && !level.isEmpty()) {
            sb.append(", Niveau: ").append(level);
        }

        if (credentialId != null) {
            sb.append(", ID: ").append(credentialId);
        }

        sb.append(")");
        return sb.toString();
    }

    // Clone method
    @Override
    public Certificate clone() {
        Certificate clone = new Certificate(
                this.name,
                this.institution,
                this.dateReceived,
                this.type
        );
        clone.expirationDate = this.expirationDate;
        clone.credentialId = this.credentialId;
        clone.credentialUrl = this.credentialUrl;
        clone.description = this.description;
        clone.isExpirable = this.isExpirable;
        clone.score = this.score;
        clone.level = this.level;
        clone.isVerified = this.isVerified;
        clone.verificationUrl = this.verificationUrl;
        return clone;
    }

    // Utility methods for date formatting
    public String getDateReceivedString() {
        return dateReceived != null ? dateReceived.toString() : "";
    }

    public String getExpirationDateString() {
        return expirationDate != null ? expirationDate.toString() : "";
    }
}
==================================================

Fichier: src\main\java\com\example\stage\model\Language.java
Chemin complet: C:\Users\Sh-Pc\Desktop\HomeFORNOW\KHEDMA\src\main\java\com\example\stage\model\Language.java
-----
package com.example.stage.model;

import java.util.Objects;

public class Language {
    private static final int MIN_NAME_LENGTH = 2;
    private static final int MAX_NAME_LENGTH = 50;

    public enum ProficiencyLevel {
        A1("DÃ©butant"),
        A2("Ã‰lÃ©mentaire"),
        B1("IntermÃ©diaire"),
        B2("IntermÃ©diaire supÃ©rieur"),
        C1("AvancÃ©"),
        C2("MaÃ®trise"),
        NATIVE("Langue maternelle");

        private final String displayName;

        ProficiencyLevel(String displayName) {
            this.displayName = displayName;
        }

        public String getDisplayName() {
            return displayName;
        }
    }

    private String name;
    private ProficiencyLevel speakingLevel;
    private ProficiencyLevel writingLevel;
    private ProficiencyLevel readingLevel;
    private String certification;
    private String certificationScore;
    private boolean isNative;
    private boolean isRequired;
    private String additionalNotes;

    public Language(String name, ProficiencyLevel level) {
        setName(name);
        this.speakingLevel = level;
        this.writingLevel = level;
        this.readingLevel = level;
        this.isNative = (level == ProficiencyLevel.NATIVE);
    }

    public Language(String name, ProficiencyLevel speaking, ProficiencyLevel writing, ProficiencyLevel reading) {
        setName(name);
        this.speakingLevel = speaking;
        this.writingLevel = writing;
        this.readingLevel = reading;
        this.isNative = (speaking == ProficiencyLevel.NATIVE);
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        if (name == null || name.trim().isEmpty()) {
            throw new IllegalArgumentException("Language name cannot be null or empty");
        }
        if (name.length() < MIN_NAME_LENGTH || name.length() > MAX_NAME_LENGTH) {
            throw new IllegalArgumentException("Language name length must be between " +
                    MIN_NAME_LENGTH + " and " + MAX_NAME_LENGTH + " characters");
        }
        this.name = name.trim();
    }

    public ProficiencyLevel getSpeakingLevel() {
        return speakingLevel;
    }

    public void setSpeakingLevel(ProficiencyLevel speakingLevel) {
        if (speakingLevel == null) {
            throw new IllegalArgumentException("Speaking level cannot be null");
        }
        this.speakingLevel = speakingLevel;
        updateNativeStatus();
    }

    public ProficiencyLevel getWritingLevel() {
        return writingLevel;
    }

    public void setWritingLevel(ProficiencyLevel writingLevel) {
        if (writingLevel == null) {
            throw new IllegalArgumentException("Writing level cannot be null");
        }
        this.writingLevel = writingLevel;
        updateNativeStatus();
    }

    public ProficiencyLevel getReadingLevel() {
        return readingLevel;
    }

    public void setReadingLevel(ProficiencyLevel readingLevel) {
        if (readingLevel == null) {
            throw new IllegalArgumentException("Reading level cannot be null");
        }
        this.readingLevel = readingLevel;
        updateNativeStatus();
    }

    public String getCertification() {
        return certification;
    }

    public void setCertification(String certification) {
        this.certification = certification != null ? certification.trim() : null;
    }

    public String getCertificationScore() {
        return certificationScore;
    }

    public void setCertificationScore(String certificationScore) {
        this.certificationScore = certificationScore != null ? certificationScore.trim() : null;
    }

    public boolean isNative() {
        return isNative;
    }

    public boolean isRequired() {
        return isRequired;
    }

    public void setRequired(boolean required) {
        isRequired = required;
    }

    public String getAdditionalNotes() {
        return additionalNotes;
    }

    public void setAdditionalNotes(String additionalNotes) {
        this.additionalNotes = additionalNotes != null ? additionalNotes.trim() : null;
    }

    private void updateNativeStatus() {
        this.isNative = (speakingLevel == ProficiencyLevel.NATIVE);
    }

    public ProficiencyLevel getOverallLevel() {
        if (isNative) return ProficiencyLevel.NATIVE;

        int total = speakingLevel.ordinal() +
                writingLevel.ordinal() +
                readingLevel.ordinal();
        int average = total / 3;

        return ProficiencyLevel.values()[Math.min(average, ProficiencyLevel.C2.ordinal())];
    }

    public String getProficiencyDescription() {
        if (isNative) {
            return ProficiencyLevel.NATIVE.getDisplayName();
        }
        return getOverallLevel().getDisplayName();
    }

    public boolean meetsESPRITRequirements() {
        if (name.equalsIgnoreCase("Anglais")) {
            return getOverallLevel().ordinal() >= ProficiencyLevel.B2.ordinal();
        }
        if (name.equalsIgnoreCase("FranÃ§ais")) {
            return getOverallLevel().ordinal() >= ProficiencyLevel.C1.ordinal();
        }
        return true;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Language language = (Language) o;
        return Objects.equals(name, language.name);
    }

    @Override
    public int hashCode() {
        return Objects.hash(name);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(name);

        if (isNative) {
            sb.append(" (Langue maternelle)");
        } else {
            sb.append(" (")
                    .append("Oral: ").append(speakingLevel.getDisplayName())
                    .append(", Ã‰crit: ").append(writingLevel.getDisplayName())
                    .append(", Lecture: ").append(readingLevel.getDisplayName())
                    .append(")");
        }

        if (certification != null) {
            sb.append(" - ").append(certification);
            if (certificationScore != null) {
                sb.append(" (").append(certificationScore).append(")");
            }
        }

        return sb.toString();
    }

    @Override
    public Language clone() {
        Language clone = new Language(this.name, this.speakingLevel,
                this.writingLevel, this.readingLevel);
        clone.certification = this.certification;
        clone.certificationScore = this.certificationScore;
        clone.isRequired = this.isRequired;
        clone.additionalNotes = this.additionalNotes;
        return clone;
    }
}
==================================================

Fichier: src\main\java\com\example\stage\model\Project.java
Chemin complet: C:\Users\Sh-Pc\Desktop\HomeFORNOW\KHEDMA\src\main\java\com\example\stage\model\Project.java
-----
package com.example.stage.model;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Objects;
import java.util.Set;

public class Project {
    // Constants for validation
    private static final int MIN_NAME_LENGTH = 3;
    private static final int MAX_NAME_LENGTH = 100;
    private static final int MAX_DESCRIPTION_LENGTH = 1000;
    private static final int MAX_URL_LENGTH = 255;

    // Project types for ESPRIT programs
    public enum ProjectType {
        PFE("Projet de Fin d'Ã‰tudes"),
        SUMMER_INTERNSHIP("Stage d'Ã©tÃ©"),
        ACADEMIC("Projet AcadÃ©mique"),
        PERSONAL("Projet Personnel"),
        RESEARCH("Projet de Recherche"),
        INNOVATION("Projet d'Innovation"),
        INDUSTRIAL("Projet Industriel");

        private final String displayName;

        ProjectType(String displayName) {
            this.displayName = displayName;
        }

        public String getDisplayName() {
            return displayName;
        }
    }

    // Project status enum
    public enum ProjectStatus {
        IN_PROGRESS("En cours"),
        COMPLETED("TerminÃ©"),
        ON_HOLD("En pause"),
        CANCELLED("AnnulÃ©");

        private final String displayName;

        ProjectStatus(String displayName) {
            this.displayName = displayName;
        }

        public String getDisplayName() {
            return displayName;
        }
    }

    // Private fields
    private String name;
    private String description;
    private LocalDate startDate;
    private LocalDate endDate;
    private String projectUrl;
    private String githubUrl;
    private ProjectStatus status;
    private ProjectType projectType;
    private List<String> technologies;
    private Set<String> roles;
    private String teamSize;
    private List<String> achievements;
    private boolean isPersonalProject;
    private String companyName;
    private String supervisor;
    private double grade; // For academic projects

    // Constructors
    public Project(String name, String description) {
        this.technologies = new ArrayList<>();
        this.roles = new HashSet<>();
        this.achievements = new ArrayList<>();
        setName(name);
        setDescription(description);
        this.status = ProjectStatus.IN_PROGRESS;
    }

    public Project(String name, String description, ProjectType projectType) {
        this(name, description);
        this.projectType = projectType;
    }

    // Getters and Setters with validation
    public String getName() {
        return name;
    }

    public void setName(String name) {
        if (name == null || name.trim().isEmpty()) {
            throw new IllegalArgumentException("Project name cannot be null or empty");
        }
        if (name.length() < MIN_NAME_LENGTH || name.length() > MAX_NAME_LENGTH) {
            throw new IllegalArgumentException("Project name length must be between " +
                    MIN_NAME_LENGTH + " and " + MAX_NAME_LENGTH + " characters");
        }
        this.name = name.trim();
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        if (description != null) {
            if (description.length() > MAX_DESCRIPTION_LENGTH) {
                throw new IllegalArgumentException("Description length cannot exceed " +
                        MAX_DESCRIPTION_LENGTH + " characters");
            }
            this.description = description.trim();
        }
    }

    public LocalDate getStartDate() {
        return startDate;
    }

    public void setStartDate(LocalDate startDate) {
        if (startDate != null && endDate != null && endDate.isBefore(startDate)) {
            throw new IllegalArgumentException("Start date cannot be after end date");
        }
        this.startDate = startDate;
    }

    public LocalDate getEndDate() {
        return endDate;
    }

    public void setEndDate(LocalDate endDate) {
        if (endDate != null && startDate != null && endDate.isBefore(startDate)) {
            throw new IllegalArgumentException("End date cannot be before start date");
        }
        this.endDate = endDate;
        if (endDate != null && endDate.isBefore(LocalDate.now())) {
            this.status = ProjectStatus.COMPLETED;
        }
    }

    public String getProjectUrl() {
        return projectUrl;
    }

    public void setProjectUrl(String projectUrl) {
        if (projectUrl != null) {
            if (projectUrl.length() > MAX_URL_LENGTH) {
                throw new IllegalArgumentException("Project URL length cannot exceed " +
                        MAX_URL_LENGTH + " characters");
            }
            this.projectUrl = projectUrl.trim();
        }
    }

    public String getGithubUrl() {
        return githubUrl;
    }

    public void setGithubUrl(String githubUrl) {
        if (githubUrl != null) {
            if (githubUrl.length() > MAX_URL_LENGTH) {
                throw new IllegalArgumentException("GitHub URL length cannot exceed " +
                        MAX_URL_LENGTH + " characters");
            }
            if (!githubUrl.contains("github.com")) {
                throw new IllegalArgumentException("Invalid GitHub URL");
            }
            this.githubUrl = githubUrl.trim();
        }
    }

    public ProjectStatus getStatus() {
        return status;
    }

    public void setStatus(ProjectStatus status) {
        this.status = status;
    }

    public ProjectType getProjectType() {
        return projectType;
    }

    public void setProjectType(ProjectType projectType) {
        this.projectType = projectType;
    }

    public List<String> getTechnologies() {
        return new ArrayList<>(technologies);
    }

    public void addTechnology(String technology) {
        if (technology != null && !technology.trim().isEmpty()) {
            this.technologies.add(technology.trim());
        }
    }

    public Set<String> getRoles() {
        return new HashSet<>(roles);
    }

    public void addRole(String role) {
        if (role != null && !role.trim().isEmpty()) {
            this.roles.add(role.trim());
        }
    }

    public String getTeamSize() {
        return teamSize;
    }

    public void setTeamSize(String teamSize) {
        this.teamSize = teamSize;
    }

    public List<String> getAchievements() {
        return new ArrayList<>(achievements);
    }

    public void addAchievement(String achievement) {
        if (achievement != null && !achievement.trim().isEmpty()) {
            this.achievements.add(achievement.trim());
        }
    }

    public boolean isPersonalProject() {
        return isPersonalProject;
    }

    public void setPersonalProject(boolean personalProject) {
        isPersonalProject = personalProject;
    }

    public String getCompanyName() {
        return companyName;
    }

    public void setCompanyName(String companyName) {
        this.companyName = companyName != null ? companyName.trim() : null;
    }

    public String getSupervisor() {
        return supervisor;
    }

    public void setSupervisor(String supervisor) {
        this.supervisor = supervisor != null ? supervisor.trim() : null;
    }

    public double getGrade() {
        return grade;
    }

    public void setGrade(double grade) {
        if (grade < 0.0 || grade > 20.0) {
            throw new IllegalArgumentException("Grade must be between 0 and 20");
        }
        this.grade = grade;
    }

    // Utility methods
    public String getDuration() {
        if (startDate == null) {
            return "DurÃ©e non spÃ©cifiÃ©e";
        }

        LocalDate endingDate = endDate != null ? endDate : LocalDate.now();
        long months = java.time.temporal.ChronoUnit.MONTHS.between(startDate, endingDate);

        if (months < 1) {
            long days = java.time.temporal.ChronoUnit.DAYS.between(startDate, endingDate);
            return days + " jours";
        } else if (months < 12) {
            return months + " mois";
        } else {
            long years = months / 12;
            months = months % 12;
            return years + " an" + (years > 1 ? "s" : "") +
                    (months > 0 ? " et " + months + " mois" : "");
        }
    }

    public boolean isValid() {
        boolean basicValidation = name != null && !name.trim().isEmpty() &&
                description != null && !description.trim().isEmpty() &&
                projectType != null;

        if (!basicValidation) return false;

        // Additional validation for PFE projects
        if (projectType == ProjectType.PFE) {
            return companyName != null && !companyName.trim().isEmpty() &&
                    supervisor != null && !supervisor.trim().isEmpty();
        }

        return true;
    }

    // Override methods
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Project project = (Project) o;
        return Objects.equals(name, project.name) &&
                Objects.equals(startDate, project.startDate) &&
                Objects.equals(projectType, project.projectType);
    }

    @Override
    public int hashCode() {
        return Objects.hash(name, startDate, projectType);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(projectType != null ? projectType.getDisplayName() + ": " : "")
                .append(name)
                .append(" (").append(status.getDisplayName()).append(")")
                .append("\nDurÃ©e: ").append(getDuration());

        if (companyName != null && !companyName.isEmpty()) {
            sb.append("\nEntreprise: ").append(companyName);
        }

        if (!technologies.isEmpty()) {
            sb.append("\nTechnologies: ").append(String.join(", ", technologies));
        }

        if (grade > 0.0) {
            sb.append("\nNote: ").append(String.format("%.2f/20", grade));
        }

        return sb.toString();
    }

    // Clone method
    @Override
    public Project clone() {
        Project clone = new Project(this.name, this.description);
        clone.startDate = this.startDate;
        clone.endDate = this.endDate;
        clone.projectUrl = this.projectUrl;
        clone.githubUrl = this.githubUrl;
        clone.status = this.status;
        clone.projectType = this.projectType;
        clone.technologies = new ArrayList<>(this.technologies);
        clone.roles = new HashSet<>(this.roles);
        clone.teamSize = this.teamSize;
        clone.achievements = new ArrayList<>(this.achievements);
        clone.isPersonalProject = this.isPersonalProject;
        clone.companyName = this.companyName;
        clone.supervisor = this.supervisor;
        clone.grade = this.grade;
        return clone;
    }
}
==================================================

Fichier: src\main\java\com\example\stage\model\WorkExperience.java
Chemin complet: C:\Users\Sh-Pc\Desktop\HomeFORNOW\KHEDMA\src\main\java\com\example\stage\model\WorkExperience.java
-----
package com.example.stage.model;

import java.time.LocalDate;
import java.time.Period;
import java.util.Objects;

public class WorkExperience {
    // Constants
    private static final int MIN_TITLE_LENGTH = 2;
    private static final int MAX_TITLE_LENGTH = 100;
    private static final int MIN_COMPANY_LENGTH = 2;
    private static final int MAX_COMPANY_LENGTH = 100;
    private static final int MAX_DESCRIPTION_LENGTH = 1000;

    // Private fields
    private String jobTitle;
    private String company;
    private LocalDate startDate;
    private LocalDate endDate;
    private String description;
    private boolean isCurrentJob;
    private String location;

    // Default constructor
    public WorkExperience() {
        this.isCurrentJob = false;
    }

    // Constructor with essential fields
    public WorkExperience(String jobTitle, String company) {
        this();
        setJobTitle(jobTitle);
        setCompany(company);
    }

    // Full constructor
    public WorkExperience(String jobTitle, String company, LocalDate startDate,
                          LocalDate endDate, String description, String location) {
        this(jobTitle, company);
        setStartDate(startDate);
        setEndDate(endDate);
        setDescription(description);
        setLocation(location);
    }

    // Getters and Setters with validation
    public String getJobTitle() {
        return jobTitle;
    }

    public void setJobTitle(String jobTitle) {
        if (jobTitle == null || jobTitle.trim().isEmpty()) {
            throw new IllegalArgumentException("Job title cannot be null or empty");
        }
        if (jobTitle.length() < MIN_TITLE_LENGTH || jobTitle.length() > MAX_TITLE_LENGTH) {
            throw new IllegalArgumentException("Job title length must be between " +
                    MIN_TITLE_LENGTH + " and " + MAX_TITLE_LENGTH + " characters");
        }
        this.jobTitle = jobTitle.trim();
    }

    public String getCompany() {
        return company;
    }

    public void setCompany(String company) {
        if (company == null || company.trim().isEmpty()) {
            throw new IllegalArgumentException("Company name cannot be null or empty");
        }
        if (company.length() < MIN_COMPANY_LENGTH || company.length() > MAX_COMPANY_LENGTH) {
            throw new IllegalArgumentException("Company name length must be between " +
                    MIN_COMPANY_LENGTH + " and " + MAX_COMPANY_LENGTH + " characters");
        }
        this.company = company.trim();
    }

    public LocalDate getStartDate() {
        return startDate;
    }

    public void setStartDate(LocalDate startDate) {
        if (startDate != null) {
            if (startDate.isAfter(LocalDate.now())) {
                throw new IllegalArgumentException("Start date cannot be in the future");
            }
            if (endDate != null && startDate.isAfter(endDate)) {
                throw new IllegalArgumentException("Start date cannot be after end date");
            }
        }
        this.startDate = startDate;
    }

    public LocalDate getEndDate() {
        return endDate;
    }

    public void setEndDate(LocalDate endDate) {
        if (endDate != null) {
            if (endDate.isAfter(LocalDate.now())) {
                throw new IllegalArgumentException("End date cannot be in the future");
            }
            if (startDate != null && endDate.isBefore(startDate)) {
                throw new IllegalArgumentException("End date cannot be before start date");
            }
        }
        this.endDate = endDate;
        this.isCurrentJob = (endDate == null);
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        if (description != null) {
            description = description.trim();
            if (description.length() > MAX_DESCRIPTION_LENGTH) {
                throw new IllegalArgumentException("Description cannot exceed " +
                        MAX_DESCRIPTION_LENGTH + " characters");
            }
        }
        this.description = description;
    }

    public boolean isCurrentJob() {
        return isCurrentJob;
    }

    public void setCurrentJob(boolean currentJob) {
        isCurrentJob = currentJob;
        if (currentJob) {
            this.endDate = null;
        }
    }

    public String getLocation() {
        return location;
    }

    public void setLocation(String location) {
        this.location = location != null ? location.trim() : null;
    }

    // Utility methods
    public String getDuration() {
        if (startDate == null) {
            return "Unknown duration";
        }

        LocalDate end = isCurrentJob ? LocalDate.now() : (endDate != null ? endDate : LocalDate.now());
        Period period = Period.between(startDate, end);

        StringBuilder duration = new StringBuilder();
        if (period.getYears() > 0) {
            duration.append(period.getYears()).append(period.getYears() == 1 ? " year" : " years");
        }
        if (period.getMonths() > 0) {
            if (duration.length() > 0) duration.append(", ");
            duration.append(period.getMonths()).append(period.getMonths() == 1 ? " month" : " months");
        }

        return duration.length() > 0 ? duration.toString() : "Less than a month";
    }

    // Override methods
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        WorkExperience that = (WorkExperience) o;
        return Objects.equals(jobTitle, that.jobTitle) &&
                Objects.equals(company, that.company) &&
                Objects.equals(startDate, that.startDate);
    }

    @Override
    public int hashCode() {
        return Objects.hash(jobTitle, company, startDate);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder()
                .append(jobTitle)
                .append(" at ")
                .append(company);

        if (location != null && !location.isEmpty()) {
            sb.append(" (").append(location).append(")");
        }

        if (startDate != null) {
            sb.append("\nDuration: ").append(getDuration());
            if (isCurrentJob) {
                sb.append(" (Current)");
            }
        }

        if (description != null && !description.isEmpty()) {
            sb.append("\n").append(description);
        }

        return sb.toString();
    }

    // Validation method
    public boolean isValid() {
        return jobTitle != null && !jobTitle.trim().isEmpty() &&
                company != null && !company.trim().isEmpty() &&
                startDate != null &&
                (endDate == null || !endDate.isBefore(startDate));
    }
}
==================================================

Fichier: src\main\java\com\example\stage\service\CVImprovementService.java
Chemin complet: C:\Users\Sh-Pc\Desktop\HomeFORNOW\KHEDMA\src\main\java\com\example\stage\service\CVImprovementService.java
-----
package com.example.stage.service;

import com.example.stage.model.CV;

import java.util.ArrayList;
import java.util.List;

public class CVImprovementService {

    public List<String> getSuggestions(CV cv) {
        List<String> suggestions = new ArrayList<>();

        if (cv.getWorkExperiences().isEmpty()) {
            suggestions.add("Ajouter plus de dÃ©tails sur votre expÃ©rience professionnelle.");
        } else {
            suggestions.add("Inclure plus de projets pour montrer votre travail.");
        }

        if (cv.getSkills().isEmpty()) {
            suggestions.add("Mettre en avant vos compÃ©tences clÃ©s.");
        } else {
            suggestions.add("DÃ©velopper vos compÃ©tences pour donner plus de dÃ©tails.");
        }

        if (cv.getEducations().isEmpty()) {
            suggestions.add("Ajouter votre parcours Ã©ducatif.");
        } else {
            suggestions.add("Inclure des certifications ou des cours spÃ©ciaux.");
        }

        return suggestions;
    }
}
==================================================

Fichier: src\main\java\com\example\stage\service\UserService.java
Chemin complet: C:\Users\Sh-Pc\Desktop\HomeFORNOW\KHEDMA\src\main\java\com\example\stage\service\UserService.java
-----
package com.example.stage.service;

public class UserService {

    public String getUserName() {
        return "Mohamed Abidi";
    }

    public String getUserEmail() {
        return "mohamed.abidi@example.com";
    }

    public String getUserPhone() {
        return "+21612345678";
    }

    public String getUserAddress() {
        return "123 Rue Principale, Omran, Monastir, Tunisie";
    }

    public String getUserLinkedIn() {
        return "https://www.linkedin.com/in/mohamedabidi";
    }

    public String getUserPortfolio() {
        return "https://mohamedabidi.com";
    }

    public String getUserSummary() {
        return "DÃ©veloppeur logiciel expÃ©rimentÃ© avec une passion pour la crÃ©ation de solutions innovantes.";
    }
}
==================================================

Fichier: src\main\resources\com\example\stage\page1.fxml
Chemin complet: C:\Users\Sh-Pc\Desktop\HomeFORNOW\KHEDMA\src\main\resources\com\example\stage\page1.fxml
-----
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.*?>
<?import javafx.scene.image.Image?>
<?import javafx.scene.image.ImageView?>
<?import javafx.scene.layout.*?>

<?import java.lang.String?>
<?import javafx.collections.FXCollections?>
<AnchorPane prefHeight="600.0" prefWidth="900.0" xmlns="http://javafx.com/javafx/21" xmlns:fx="http://javafx.com/fxml/1" fx:controller="com.example.stage.controller.Page1Controller">
    <ImageView fitHeight="109.0" fitWidth="140.0" layoutY="20.0" pickOnBounds="true" preserveRatio="true">
        <image>
            <Image url="@../../../images/logo.png" />
        </image>
    </ImageView>

    <!-- Logo Image Right -->
    <ImageView fitHeight="46.0" fitWidth="119.0" layoutX="729.0" layoutY="51.0" pickOnBounds="true" preserveRatio="true" AnchorPane.rightAnchor="10.0">
        <image>
            <Image url="@../../../images/esprim.png" />
        </image>
    </ImageView>

    <ImageView fitHeight="100.0" fitWidth="150.0" layoutX="231.0" layoutY="22.0" pickOnBounds="true" preserveRatio="true">
        <image>
            <Image url="@../../../images/tunisie-removebg-preview.png" />
        </image>
    </ImageView>

    <ScrollPane fitToHeight="true" fitToWidth="true" hbarPolicy="NEVER" vbarPolicy="ALWAYS" AnchorPane.bottomAnchor="10.0" AnchorPane.leftAnchor="10.0" AnchorPane.rightAnchor="10.0" AnchorPane.topAnchor="126.0">
        <VBox fillWidth="true" spacing="10" style="-fx-padding: 20px;">
            <!-- Language Selection -->
            <HBox spacing="10">
                <ComboBox fx:id="languageComboBox" prefHeight="21.0" prefWidth="113.0" />
                <Button fx:id="translateButton" onAction="#translatePage" style="-fx-background-color: #E31A22; -fx-text-fill: white;" text="Translate" />
            </HBox>

            <!-- Personal Information Section -->
            <VBox spacing="10">
                <Label fx:id="personalInformationLabel" style="-fx-font-weight: bold; -fx-text-fill: #E31A22;" text="Personal Information" />
                <GridPane hgap="10" vgap="10">
                    <columnConstraints>
                        <ColumnConstraints maxWidth="104.0" minWidth="59.0" prefWidth="104.0" />
                        <ColumnConstraints maxWidth="473.0" minWidth="428.0" prefWidth="428.0" />
                    </columnConstraints>
                    <rowConstraints>
                        <RowConstraints />
                        <RowConstraints />
                        <RowConstraints />
                        <RowConstraints />
                        <RowConstraints />
                        <RowConstraints />
                    </rowConstraints>

                    <Label fx:id="fullNameLabel" text="Full Name" GridPane.columnIndex="0" GridPane.rowIndex="0" />
                    <TextField fx:id="nameField" prefHeight="22.0" prefWidth="471.0" GridPane.columnIndex="1" GridPane.rowIndex="0" />

                    <Label fx:id="emailLabel" text="Email" GridPane.columnIndex="0" GridPane.rowIndex="1" />
                    <TextField fx:id="emailField" GridPane.columnIndex="1" GridPane.rowIndex="1" />

                    <Label fx:id="phoneLabel" text="Phone" GridPane.columnIndex="0" GridPane.rowIndex="2" />
                    <TextField fx:id="phoneField" GridPane.columnIndex="1" GridPane.rowIndex="2" />

                    <Label fx:id="addressLabel" text="Address" GridPane.columnIndex="0" GridPane.rowIndex="3" />
                    <TextArea fx:id="addressArea" GridPane.columnIndex="1" GridPane.rowIndex="3" />

                    <Label fx:id="linkedinLabel" text="LinkedIn" GridPane.columnIndex="0" GridPane.rowIndex="4" />
                    <TextField fx:id="linkedinField" GridPane.columnIndex="1" GridPane.rowIndex="4" />

                    <Label fx:id="portfolioLabel" text="Portfolio" GridPane.columnIndex="0" GridPane.rowIndex="5" />
                    <TextField fx:id="portfolioField" GridPane.columnIndex="1" GridPane.rowIndex="5" />
                </GridPane>
            </VBox>

            <!-- Summary Section -->
            <VBox spacing="10">
                <Label fx:id="summaryObjectiveLabel" style="-fx-font-weight: bold; -fx-text-fill: #E31A22;" text="Summary / Objective" />
                <HBox spacing="10">
                    <TextArea fx:id="summaryArea" prefHeight="40.0" prefWidth="541.0" />
                    <Button onAction="#showSummaryHelp" style="-fx-background-color: #E31A22; -fx-text-fill: white;" text="â“˜" />
                </HBox>
            </VBox>

            <!-- Education Section -->

            <!-- Remove this duplicate comment and section -->
            <!-- Education Section -->

            <!-- Keep only this Education Section -->
            <VBox spacing="10">
                <Label fx:id="educationLabel" style="-fx-font-weight: bold; -fx-text-fill: #E31A22;" text="Education" />
                <VBox fx:id="educationContainer" spacing="5">
                    <GridPane hgap="10" vgap="10">
                        <columnConstraints>
                            <ColumnConstraints maxWidth="109.0" minWidth="93.0" prefWidth="106.0" />
                            <ColumnConstraints maxWidth="169.0" minWidth="153.0" prefWidth="156.0" />
                        </columnConstraints>
                        <rowConstraints>
                            <RowConstraints />
                            <RowConstraints />
                            <RowConstraints />
                            <RowConstraints />
                            <RowConstraints />
                        </rowConstraints>

                        <Label text="Institution" GridPane.rowIndex="0" />
                        <ComboBox fx:id="institutionComboBox" prefWidth="150.0" GridPane.columnIndex="1" GridPane.rowIndex="0">
                            <items>
                                <FXCollections fx:factory="observableArrayList">
                                    <String fx:value="ESPRIT" />
                                    <String fx:value="ESPRIM" />
                                    <String fx:value="ESPRIT SCHOOL OF BUSINESS" />
                                </FXCollections>
                            </items>
                        </ComboBox>

                        <Label text="Degree Level" GridPane.rowIndex="1" />
                        <ComboBox fx:id="degreeLevelComboBox" prefWidth="150.0" GridPane.columnIndex="1" GridPane.rowIndex="1" />

                        <Label text="Specialization" GridPane.rowIndex="2" />
                        <ComboBox fx:id="specializationComboBox" prefWidth="150.0" GridPane.columnIndex="1" GridPane.rowIndex="2" />

                        <Label text="Graduation Date" GridPane.rowIndex="3" />
                        <DatePicker fx:id="graduationDateField" GridPane.columnIndex="1" GridPane.rowIndex="3" />
                    </GridPane>
                </VBox>
                <Button fx:id="addEducationButton" onAction="#addEducation"
                        style="-fx-background-color: #E31A22; -fx-text-fill: white;" text="Add Education" />
            </VBox>
            <!-- Work Experience Section -->
            <VBox spacing="10">
                <Label fx:id="workExperienceLabel" style="-fx-font-weight: bold; -fx-text-fill: #E31A22;" text="Work Experience" />
                <VBox fx:id="workExperienceContainer" spacing="5">
                    <GridPane hgap="10" vgap="10">
                        <columnConstraints>
                            <ColumnConstraints maxWidth="109.0" minWidth="93.0" prefWidth="106.0" />
                            <ColumnConstraints maxWidth="169.0" minWidth="153.0" prefWidth="156.0" />
                        </columnConstraints>
                        <rowConstraints>
                            <RowConstraints />
                            <RowConstraints />
                            <RowConstraints />
                            <RowConstraints />
                            <RowConstraints />
                        </rowConstraints>

                        <Label text="Job Title" GridPane.rowIndex="0" />
                        <TextField fx:id="jobTitleField" GridPane.columnIndex="1" GridPane.rowIndex="0" />

                        <Label text="Company" GridPane.rowIndex="1" />
                        <TextField fx:id="companyField" GridPane.columnIndex="1" GridPane.rowIndex="1" />

                        <Label text="Start Date" GridPane.rowIndex="2" />
                        <DatePicker fx:id="startDateField" GridPane.columnIndex="1" GridPane.rowIndex="2" />

                        <Label text="End Date" GridPane.rowIndex="3" />
                        <DatePicker fx:id="endDateField" GridPane.columnIndex="1" GridPane.rowIndex="3" />

                        <Label text="Description" GridPane.rowIndex="4" />
                        <TextArea fx:id="descriptionArea" prefHeight="60" GridPane.columnIndex="1" GridPane.rowIndex="4" />
                    </GridPane>
                </VBox>
                <Button fx:id="addWorkExperienceButton" onAction="#addWorkExperience" style="-fx-background-color: #E31A22; -fx-text-fill: white;" text="Add Work Experience" />
            </VBox>

            <!-- Footer Buttons -->
            <HBox alignment="CENTER" spacing="10">
                <Button fx:id="autoFillButton" onAction="#autoFillForm" style="-fx-background-color: #E31A22; -fx-text-fill: white;" text="Auto Fill" />
                <Button fx:id="nextButton" onAction="#goToPage2" style="-fx-background-color: #E31A22; -fx-text-fill: white;" text="Next" />
            </HBox>
        </VBox>
    </ScrollPane>
</AnchorPane>
==================================================

Fichier: src\main\resources\com\example\stage\page2.fxml
Chemin complet: C:\Users\Sh-Pc\Desktop\HomeFORNOW\KHEDMA\src\main\resources\com\example\stage\page2.fxml
-----
<?xml version="1.0" encoding="UTF-8"?>

<?import java.lang.String?>
<?import javafx.collections.FXCollections?>
<?import javafx.scene.control.Button?>
<?import javafx.scene.control.ComboBox?>
<?import javafx.scene.control.DatePicker?>
<?import javafx.scene.control.Label?>
<?import javafx.scene.control.ScrollPane?>
<?import javafx.scene.control.TextArea?>
<?import javafx.scene.control.TextField?>
<?import javafx.scene.image.Image?>
<?import javafx.scene.image.ImageView?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.layout.ColumnConstraints?>
<?import javafx.scene.layout.GridPane?>
<?import javafx.scene.layout.HBox?>
<?import javafx.scene.layout.RowConstraints?>
<?import javafx.scene.layout.VBox?>

<AnchorPane prefHeight="600.0" prefWidth="900.0" xmlns="http://javafx.com/javafx/21" xmlns:fx="http://javafx.com/fxml/1" fx:controller="com.example.stage.controller.Page2Controller">
    <!-- Images at the top -->
    <ImageView fitHeight="109.0" fitWidth="140.0" layoutY="20.0" pickOnBounds="true" preserveRatio="true">
        <image>
            <Image url="@../../../images/logo.png" />
        </image>
    </ImageView>

    <!-- Logo Image Right -->
    <ImageView fitHeight="46.0" fitWidth="119.0" layoutX="729.0" layoutY="51.0" pickOnBounds="true" preserveRatio="true" AnchorPane.rightAnchor="10.0">
        <image>
            <Image url="@../../../images/esprim.png" />
        </image>
    </ImageView>

    <HBox alignment="CENTER" layoutX="557.0" layoutY="8.0" prefHeight="109.0" prefWidth="335.0" spacing="20" AnchorPane.leftAnchor="557.0" AnchorPane.rightAnchor="8.0" AnchorPane.topAnchor="8.0">
        <!-- Logo Image Right -->
    </HBox>

    <ScrollPane fitToHeight="true" fitToWidth="true" hbarPolicy="NEVER" layoutY="126.0" prefHeight="464.0" prefWidth="888.0" vbarPolicy="ALWAYS" AnchorPane.bottomAnchor="10.0" AnchorPane.leftAnchor="10.0" AnchorPane.rightAnchor="10.0" AnchorPane.topAnchor="126.0">
        <VBox alignment="CENTER" prefHeight="630.0" prefWidth="859.0" spacing="10" style="-fx-padding: 20px;">
            <GridPane alignment="CENTER" hgap="10" maxWidth="Infinity" prefHeight="598.0" prefWidth="825.0" vgap="10">
                <!-- Section: Skills -->
                <Label fx:id="skillsLabel" style="-fx-font-weight: bold; -fx-text-fill: #E31A22;" text="Skills" GridPane.columnSpan="2" GridPane.rowIndex="0" />

                <!-- Add this right after the skills section header -->

                <VBox fx:id="skillContainerList" spacing="5" GridPane.columnSpan="2" GridPane.rowIndex="1">
                    <HBox spacing="10">
                        <TextField fx:id="skillsField" promptText="Enter a skill"/>
                        <Button onAction="#addSkill" style="-fx-background-color: #E31A22; -fx-text-fill: white;" text="Add Skill"/>
                    </HBox>
                    <VBox fx:id="skillsContainer" spacing="5"/>
                </VBox>
                <!-- Section: Projects -->
                <Label fx:id="projectsLabel" style="-fx-font-weight: bold; -fx-text-fill: #E31A22;" text="Projects" GridPane.columnSpan="2" GridPane.rowIndex="2" />
                <VBox fx:id="projectsContainer" spacing="5" GridPane.columnSpan="2" GridPane.rowIndex="3">
                    <GridPane hgap="5" vgap="5">
                        <Label text="Project Name:" GridPane.columnIndex="0" GridPane.rowIndex="0" />
                        <TextField fx:id="projectNameField" GridPane.columnIndex="1" GridPane.rowIndex="0" />
                        <Label text="Project Description:" GridPane.columnIndex="0" GridPane.rowIndex="1" />
                        <HBox GridPane.columnIndex="1" GridPane.rowIndex="1">
                            <TextArea fx:id="projectDescriptionArea" prefHeight="60" />
                            <Button onAction="#showProjectHelp" style="-fx-background-color: #E31A22; -fx-text-fill: white; -fx-font-weight: bold;" text="?" />
                        </HBox>
                        <Button onAction="#addProject" style="-fx-background-color: #E31A22; -fx-text-fill: white;" text="Add Project" GridPane.columnIndex="1" GridPane.rowIndex="2" />
                        <columnConstraints>
                            <ColumnConstraints />
                            <ColumnConstraints />
                        </columnConstraints>
                        <rowConstraints>
                            <RowConstraints />
                            <RowConstraints />
                            <RowConstraints />
                        </rowConstraints>
                    </GridPane>
                </VBox>

                <!-- Section: Certificates -->
                <Label fx:id="certificatesLabel" style="-fx-font-weight: bold; -fx-text-fill: #E31A22;" text="Certificates" GridPane.columnSpan="2" GridPane.rowIndex="4" />
                <VBox fx:id="certificatesContainer" spacing="5" GridPane.columnSpan="2" GridPane.rowIndex="5">
                    <GridPane hgap="5" vgap="5">
                        <Label text="Certificate Name:" GridPane.columnIndex="0" GridPane.rowIndex="0" />
                        <TextField fx:id="certificateNameField" GridPane.columnIndex="1" GridPane.rowIndex="0" />
                        <Label text="Institution:" GridPane.columnIndex="0" GridPane.rowIndex="1" />
                        <TextField fx:id="certificateInstitutionField" GridPane.columnIndex="1" GridPane.rowIndex="1" />
                        <Label text="Date of Receipt:" GridPane.columnIndex="0" GridPane.rowIndex="2" />
                        <DatePicker fx:id="certificateDateField" GridPane.columnIndex="1" GridPane.rowIndex="2" />
                        <Button onAction="#addCertificate" style="-fx-background-color: #E31A22; -fx-text-fill: white;" text="Add Certificate" GridPane.columnIndex="1" GridPane.rowIndex="3" />
                        <columnConstraints>
                            <ColumnConstraints />
                            <ColumnConstraints />
                        </columnConstraints>
                        <rowConstraints>
                            <RowConstraints />
                            <RowConstraints />
                            <RowConstraints />
                            <RowConstraints />
                        </rowConstraints>
                    </GridPane>
                </VBox>

                <!-- Section: Languages -->
                <Label fx:id="languagesLabel" style="-fx-font-weight: bold; -fx-text-fill: #E31A22;" text="Languages" GridPane.columnSpan="2" GridPane.rowIndex="6" />
                <VBox fx:id="languagesContainer" spacing="5" GridPane.columnSpan="2" GridPane.rowIndex="7">
                    <GridPane hgap="5" vgap="5">
                        <Label text="Language:" GridPane.columnIndex="0" GridPane.rowIndex="0" />
                        <TextField fx:id="languageField" GridPane.columnIndex="1" GridPane.rowIndex="0" />
                        <Label text="Proficiency Level:" GridPane.columnIndex="0" GridPane.rowIndex="1" />
                        <ComboBox fx:id="languageProficiencyField" GridPane.columnIndex="1" GridPane.rowIndex="1">
                            <items>
                                <FXCollections fx:factory="observableArrayList">
                                    <String fx:value="A1 (Beginner)" />      <!-- A1: Basic user, beginner level -->
                                    <String fx:value="A2 (Elementary)" />    <!-- A2: Basic user, elementary level -->
                                    <String fx:value="B1 (Intermediate)" />  <!-- B1: Independent user, intermediate level -->
                                    <String fx:value="B2 (Upper Intermediate)" /> <!-- B2: Independent user, upper intermediate level -->
                                    <String fx:value="C1 (Advanced)" />      <!-- C1: Proficient user, advanced level -->
                                    <String fx:value="C2 (Bilingual)" />     <!-- C2: Proficient user, near-native fluency -->

                                </FXCollections>
                            </items>
                        </ComboBox>
                        <Button onAction="#addLanguage" style="-fx-background-color: #E31A22; -fx-text-fill: white;" text="Add Language" GridPane.columnIndex="1" GridPane.rowIndex="2" />
                        <columnConstraints>
                            <ColumnConstraints />
                            <ColumnConstraints />
                        </columnConstraints>
                        <rowConstraints>
                            <RowConstraints />
                            <RowConstraints />
                            <RowConstraints />
                        </rowConstraints>
                    </GridPane>
                </VBox>

                <!-- Back and Translate Buttons -->

                <Button fx:id="backButton" onAction="#goToPage1" style="-fx-background-color: #E31A22; -fx-text-fill: white;" text="Back" GridPane.columnIndex="0" GridPane.rowIndex="8" />
                <ComboBox fx:id="languageComboBox" GridPane.columnIndex="0" GridPane.rowIndex="9" />
                <Button fx:id="translateButton" onAction="#translatePage" style="-fx-background-color: #E31A22; -fx-text-fill: white;" text="Translate" GridPane.columnIndex="1" GridPane.rowIndex="9" />

                <!-- Generate PDF Button -->
                <Button fx:id="generatePDFButton" onAction="#generatePDF" style="-fx-background-color: #E31A22; -fx-text-fill: white;" text="Generate PDF" GridPane.columnIndex="1" GridPane.rowIndex="10" />
                <Button fx:id="autoFillButton" text="Auto Fill" onAction="#autoFillForm" GridPane.columnIndex="1" GridPane.rowIndex="11" />
                <columnConstraints>
                    <ColumnConstraints />
                    <ColumnConstraints />
                </columnConstraints>
                <rowConstraints>
                    <RowConstraints />
                    <RowConstraints />
                    <RowConstraints />
                    <RowConstraints />
                    <RowConstraints />
                    <RowConstraints />
                    <RowConstraints />
                    <RowConstraints />
                    <RowConstraints />
                    <RowConstraints />
                    <RowConstraints />
                    <RowConstraints />
                </rowConstraints>
            </GridPane>
        </VBox>
    </ScrollPane>

    <!-- Logo Image Left -->

    <ImageView fitHeight="100.0" fitWidth="150.0" layoutX="231.0" layoutY="22.0" pickOnBounds="true" preserveRatio="true">
        <image>
            <Image url="@../../../images/tunisie-removebg-preview.png" />
        </image>
    </ImageView>
</AnchorPane>
==================================================

Fichier: src\main\resources\com\example\stage\welcome.fxml
Chemin complet: C:\Users\Sh-Pc\Desktop\HomeFORNOW\KHEDMA\src\main\resources\com\example\stage\welcome.fxml
-----
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.geometry.Rectangle2D?>
<?import javafx.scene.image.Image?>
<?import javafx.scene.image.ImageView?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.layout.ColumnConstraints?>
<?import javafx.scene.layout.GridPane?>
<?import javafx.scene.layout.HBox?>
<?import javafx.scene.layout.RowConstraints?>
<?import javafx.scene.layout.StackPane?>
<?import javafx.scene.shape.Rectangle?>

<AnchorPane prefHeight="600.0" prefWidth="900.0" xmlns="http://javafx.com/javafx/21" xmlns:fx="http://javafx.com/fxml/1" fx:controller="com.example.stage.controller.WelcomeController">
    <StackPane prefHeight="600.0" prefWidth="900.0" AnchorPane.bottomAnchor="6.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="8.0" AnchorPane.topAnchor="0.0">
        <!-- Background Rectangle -->
        <Rectangle fill="#ffffff" height="600.0" width="900.0" />

        <!-- Top Logos -->
        <HBox alignment="CENTER" spacing="20.0" style="-fx-padding: 20px;">
            <GridPane prefHeight="586.0" prefWidth="930.0">
                <columnConstraints>
                    <ColumnConstraints maxWidth="129.0" minWidth="0.0" prefWidth="82.0" />
                    <ColumnConstraints maxWidth="134.0" minWidth="0.0" prefWidth="96.0" />
               <ColumnConstraints hgrow="SOMETIMES" maxWidth="354.0" minWidth="0.0" prefWidth="138.0" />
               <ColumnConstraints hgrow="SOMETIMES" maxWidth="516.0" minWidth="10.0" prefWidth="353.0" />
               <ColumnConstraints hgrow="SOMETIMES" maxWidth="274.0" minWidth="10.0" prefWidth="191.0" />
                </columnConstraints>
                <rowConstraints>
               <RowConstraints maxHeight="195.0" minHeight="10.0" prefHeight="107.0" />
               <RowConstraints maxHeight="184.0" minHeight="10.0" prefHeight="101.0" />
                    <RowConstraints maxHeight="184.0" minHeight="0.0" prefHeight="100.0" />
                    <RowConstraints maxHeight="139.0" minHeight="10.0" prefHeight="83.0" vgrow="SOMETIMES" />
               <RowConstraints maxHeight="205.0" minHeight="10.0" prefHeight="82.0" vgrow="SOMETIMES" />
               <RowConstraints maxHeight="341.0" minHeight="10.0" prefHeight="79.0" vgrow="SOMETIMES" />
               <RowConstraints maxHeight="324.0" minHeight="0.0" prefHeight="64.0" vgrow="SOMETIMES" />
               <RowConstraints maxHeight="324.0" minHeight="0.0" prefHeight="0.0" vgrow="SOMETIMES" />
                </rowConstraints>
                <children>
                <ImageView fitHeight="96.0" fitWidth="130.0" pickOnBounds="true" preserveRatio="true" GridPane.columnIndex="4" GridPane.halignment="LEFT" GridPane.rowSpan="2" GridPane.valignment="TOP">
                    <image>
                        <Image url="@../../../images/tunisie-removebg-preview.png" />
                    </image>
                </ImageView>
                    <ImageView fitHeight="217.0" fitWidth="210.0" pickOnBounds="true" preserveRatio="true" GridPane.columnIndex="3" GridPane.halignment="CENTER" GridPane.rowIndex="5">
                        <image>
                            <Image url="@../../../images/esprit-removebg-preview.png" />
                        </image>
                        <viewport>
                            <Rectangle2D />
                        </viewport>
                    </ImageView>
                    <ImageView fitHeight="75.0" fitWidth="212.0" pickOnBounds="true" preserveRatio="true" GridPane.columnIndex="3" GridPane.halignment="CENTER" GridPane.rowIndex="2">
                        <image>
                            <Image url="@../../../images/esprim.png" />
                        </image>
                    </ImageView>
                    <ImageView fitHeight="152.0" fitWidth="152.0" pickOnBounds="true" preserveRatio="true" GridPane.columnIndex="2" GridPane.halignment="CENTER">
                        <image>
                            <Image url="@../../../images/unnamed-removebg-preview.png" />
                        </image>
                    </ImageView>
                    <ImageView fitHeight="213.0" fitWidth="203.0" GridPane.columnIndex="3" GridPane.halignment="CENTER" GridPane.rowIndex="4">
                        <image>
                            <Image url="@../../../images/espritprepa-removebg-preview.png" />
                        </image>
                    </ImageView>
                  <ImageView fitHeight="124.0" fitWidth="210.0" nodeOrientation="INHERIT" pickOnBounds="true" preserveRatio="true" GridPane.columnIndex="3" GridPane.halignment="CENTER" GridPane.valignment="CENTER">

                      <image>
                          <Image url="@../../../images/logo.png" />
                      </image>
                  <viewport>
                     <Rectangle2D />
                  </viewport>
                  </ImageView>
                    <ImageView fitHeight="103.0" fitWidth="187.0" pickOnBounds="true" preserveRatio="true" GridPane.columnIndex="3" GridPane.halignment="CENTER" GridPane.rowIndex="3">
                        <image>
                            <Image url="@../../../images/espritesb.png" />
                      </image>
                  </ImageView>

                 <!-- Rotating Gear Animation -->
                 <ImageView fx:id="loadingGear" fitHeight="80.0" fitWidth="80.0" GridPane.columnIndex="3" GridPane.halignment="CENTER" GridPane.rowIndex="6">
                     <image>
                         <Image url="@../../../images/gear.png" />
                     </image>
                 </ImageView>
                </children>
            </GridPane>
        </HBox>
    </StackPane>
</AnchorPane>

==================================================

Fichier: src\main\java\com\example\stage\HelloApplication.java
Chemin complet: C:\Users\Sh-Pc\Desktop\HomeFORNOW\KHEDMA\src\main\java\com\example\stage\HelloApplication.java
-----
package com.example.stage;

import javafx.application.Application;
import javafx.fxml.FXMLLoader;
import javafx.scene.Scene;
import javafx.stage.Stage;
import javafx.stage.StageStyle;

import java.io.IOException;

public class HelloApplication extends Application {
    @Override
    public void start(Stage stage) throws IOException {
        // Load the first page FXML file
        FXMLLoader fxmlLoader = new FXMLLoader(HelloApplication.class.getResource("first-page.fxml"));
        Scene scene = new Scene(fxmlLoader.load(), 800, 600);

        // Remove window decorations (optional)
        stage.initStyle(StageStyle.UNDECORATED);

        // Set the scene and show the stage
        stage.setScene(scene);
        stage.show();
    }

    public static void main(String[] args) {
        launch();
    }
}
==================================================

Fichier: src\main\java\com\example\stage\controller\Page1Controller.java
Chemin complet: C:\Users\Sh-Pc\Desktop\HomeFORNOW\KHEDMA\src\main\java\com\example\stage\controller\Page1Controller.java
-----
package com.example.stage.controller;

import com.example.stage.model.CV;
import com.example.stage.model.Education;
import com.example.stage.model.WorkExperience;
import com.example.stage.util.NavigationManager;
import com.example.stage.util.ResourceManager;
import com.example.stage.validation.CVDataValidator;
import javafx.application.Platform;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.ColumnConstraints;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

import java.io.IOException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.ZoneOffset;
import java.time.format.DateTimeFormatter;
import java.util.*;

public class Page1Controller {
    private final CVDataValidator cvValidator;


    public Page1Controller() {
        this.cvValidator = new CVDataValidator();
    }
    @FXML private TextField nameField;
    @FXML private TextField emailField;
    @FXML private TextField phoneField;
    @FXML private TextArea addressArea;
    @FXML private TextField linkedinField;
    @FXML private TextField portfolioField;
    @FXML private TextArea summaryArea;
    @FXML private ComboBox<String> institutionComboBox;
    @FXML private ComboBox<String> degreeLevelComboBox;
    @FXML private ComboBox<String> specializationComboBox;
    @FXML private DatePicker graduationDateField;
    @FXML private VBox educationContainer;

    @FXML private TextField jobTitleField;
    @FXML private TextField companyField;
    @FXML private DatePicker startDateField;
    @FXML private DatePicker endDateField;
    @FXML private TextArea descriptionArea;
    @FXML private VBox workExperienceContainer;

    @FXML private Button nextButton;
    @FXML private Button autoFillButton;
    @FXML private ComboBox<String> languageComboBox;
    @FXML private Button translateButton;

    @FXML private Label personalInformationLabel;
    @FXML private Label fullNameLabel;
    @FXML private Label emailLabel;
    @FXML private Label phoneLabel;
    @FXML private Label addressLabel;
    @FXML private Label linkedinLabel;
    @FXML private Label portfolioLabel;
    @FXML private Label summaryObjectiveLabel;
    @FXML private Label educationLabel;
    @FXML private Label workExperienceLabel;

    private static final String EMAIL_REGEX = "^[A-Za-z0-9+_.-]+@(.+)$";
    private static final String PHONE_REGEX = "^\\+?[0-9]{8,}$";
    private static final String LINKEDIN_REGEX = "^(https?://)?(www\\.)?linkedin\\.com/.*$";
    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ISO_LOCAL_DATE;
    private static final int MAX_SUMMARY_LENGTH = 500;
    private static final int MAX_DESCRIPTION_LENGTH = 1000;


    @FXML
    private void initialize() {
        setupLanguageComboBox();
        setupValidations();
        setupInitialValues();
        setupEducationData();
        setupComboBoxListeners();
    }
    private void setupEducationData() {
        // Engineering Programs (ESPRIT & ESPRIM)
        List<String> engineeringSpecializations = Arrays.asList(
                "GÃ©nie Informatique",
                "GÃ©nie des TÃ©lÃ©communications",
                "GÃ©nie Ã‰lectromÃ©canique",
                "GÃ©nie Civil",
                "GÃ©nie MÃ©catronique"
        );

        // Licenses (ESPRIT SCHOOL OF BUSINESS)
        List<String> licensePrograms = Arrays.asList(
                "Licence en Business Computing (LBC)",
                "Licence en MathÃ©matiques AppliquÃ©es Ã  l'Analyse des DonnÃ©es et Ã  l'Aide Ã  la DÃ©cision (LMAD)",
                "Licence en Sciences de Gestion (LSG)"
        );

        // Masters (ESPRIT SCHOOL OF BUSINESS)
        List<String> masterPrograms = Arrays.asList(
                "Master en Business Analytics",
                "Master en ComptabilitÃ©, ContrÃ´le, Audit (CCA)",
                "Master en Management Digital et SystÃ¨mes d'Information (MDSI)",
                "Master en Marketing Digital (MKD)",
                "Master en Finance Digitale (FIND)",
                "Master en Gestion Actuarielle et ModÃ©lisation MathÃ©matique (GAMMA)"
        );

        // Setup data structure
        Map<String, List<String>> espritPrograms = new HashMap<>();
        espritPrograms.put("Cycle IngÃ©nieur", engineeringSpecializations);

        Map<String, List<String>> esprimPrograms = new HashMap<>();
        esprimPrograms.put("Cycle IngÃ©nieur", engineeringSpecializations);

        Map<String, List<String>> businessSchoolPrograms = new HashMap<>();
        businessSchoolPrograms.put("Licence", licensePrograms);
        businessSchoolPrograms.put("Master", masterPrograms);

        educationData.put("ESPRIT", espritPrograms);
        educationData.put("ESPRIM", esprimPrograms);
        educationData.put("ESPRIT SCHOOL OF BUSINESS", businessSchoolPrograms);

        // Initialize institution ComboBox
        institutionComboBox.getItems().addAll("ESPRIT", "ESPRIM", "ESPRIT SCHOOL OF BUSINESS");
    }
    private final Map<String, Map<String, List<String>>> educationData = new HashMap<>();

    private void setupComboBoxListeners() {
        institutionComboBox.setOnAction(e -> {
            String selectedInstitution = institutionComboBox.getValue();
            if (selectedInstitution != null) {
                degreeLevelComboBox.getItems().clear();
                specializationComboBox.getItems().clear();
                degreeLevelComboBox.getItems().addAll(educationData.get(selectedInstitution).keySet());
            }
        });

        degreeLevelComboBox.setOnAction(e -> {
            String selectedInstitution = institutionComboBox.getValue();
            String selectedDegreeLevel = degreeLevelComboBox.getValue();
            if (selectedInstitution != null && selectedDegreeLevel != null) {
                specializationComboBox.getItems().clear();
                specializationComboBox.getItems().addAll(
                        educationData.get(selectedInstitution).get(selectedDegreeLevel)
                );
            }
        });
    }
    private void setupLanguageComboBox() {
        languageComboBox.getItems().addAll("English", "French", "German", "Arabic");
        languageComboBox.setValue("English");
    }

    private void setupValidations() {
        // Garder uniquement la limite de caractÃ¨res
        summaryArea.textProperty().addListener((obs, old, newVal) -> {
            if (newVal.length() > MAX_SUMMARY_LENGTH) {
                summaryArea.setText(old);
                showAlert("Info", "Limite de caractÃ¨res atteinte");
            }
        });
    }
    private void setupInitialValues() {
        nameField.setPromptText("Enter your full name");
        emailField.setPromptText("example@email.com");
        phoneField.setPromptText("+21612345678");
        addressArea.setPromptText("Enter your address");
        linkedinField.setPromptText("linkedin.com/in/yourprofile");
        portfolioField.setPromptText("yourportfolio.com");
        summaryArea.setPromptText("Brief professional summary");
    }

    @FXML
    private void translatePage() {
        String selectedLanguage = languageComboBox.getValue();
        Locale locale = switch (selectedLanguage) {
            case "French" -> Locale.FRENCH;
            case "German" -> Locale.GERMAN;
            case "Arabic" -> Locale.forLanguageTag("ar"); // Changed from new Locale("ar")
            default -> Locale.ENGLISH;
        };
        ResourceManager.setLocale(locale);
        updateTranslations();
    }
    private void updateTranslations() {
        personalInformationLabel.setText(ResourceManager.getString("personal_information"));
        fullNameLabel.setText(ResourceManager.getString("full_name"));
        emailLabel.setText(ResourceManager.getString("email"));
        phoneLabel.setText(ResourceManager.getString("phone"));
        addressLabel.setText(ResourceManager.getString("address"));
        linkedinLabel.setText(ResourceManager.getString("linkedin"));
        portfolioLabel.setText(ResourceManager.getString("portfolio"));
        summaryObjectiveLabel.setText(ResourceManager.getString("summary_objective"));
        educationLabel.setText(ResourceManager.getString("education"));
        workExperienceLabel.setText(ResourceManager.getString("work_experience"));

        nextButton.setText(ResourceManager.getString("next"));
        translateButton.setText(ResourceManager.getString("translate"));
        autoFillButton.setText(ResourceManager.getString("auto_fill"));
    }

    @FXML
    private void addEducation() {
        if (!validateEducationFields()) return;

        GridPane educationEntry = new GridPane();
        educationEntry.setHgap(10);
        educationEntry.setVgap(10);

        // Create labels with the selected values
        Label degreeLabel = new Label(specializationComboBox.getValue());
        Label institutionLabel = new Label(institutionComboBox.getValue());
        Label levelLabel = new Label(degreeLevelComboBox.getValue());
        DatePicker gradDatePicker = new DatePicker(graduationDateField.getValue());
        gradDatePicker.setEditable(false);

        // Add fields to grid
        educationEntry.add(new Label("Degree:"), 0, 0);
        educationEntry.add(degreeLabel, 1, 0);
        educationEntry.add(new Label("Institution:"), 0, 1);
        educationEntry.add(institutionLabel, 1, 1);
        educationEntry.add(new Label("Level:"), 0, 2);
        educationEntry.add(levelLabel, 1, 2);
        educationEntry.add(new Label("Graduation Date:"), 0, 3);
        educationEntry.add(gradDatePicker, 1, 3);

        Button removeButton = new Button("Remove");
        removeButton.setStyle("-fx-background-color: #E31A22; -fx-text-fill: white;");
        removeButton.setOnAction(e -> educationContainer.getChildren().remove(educationEntry));
        educationEntry.add(removeButton, 1, 4);

        educationContainer.getChildren().add(educationEntry);
        clearEducationFields();
    }
    @FXML
    private void addWorkExperience() {
        if (!validateWorkExperienceFields()) return;

        GridPane workExperienceEntry = new GridPane();
        workExperienceEntry.setHgap(10);
        workExperienceEntry.setVgap(10);

        // Create fields
        TextField jobTitleField = new TextField(this.jobTitleField.getText());
        TextField companyField = new TextField(this.companyField.getText());
        DatePicker startDateField = new DatePicker(this.startDateField.getValue());
        DatePicker endDateField = new DatePicker(this.endDateField.getValue());
        TextArea descriptionArea = new TextArea(this.descriptionArea.getText());
        descriptionArea.setPrefHeight(60);
        descriptionArea.setWrapText(true);

        // Set column constraints
        workExperienceEntry.getColumnConstraints().addAll(
                new ColumnConstraints(106),
                new ColumnConstraints(156)
        );

        // Add fields
        workExperienceEntry.add(new Label("Job Title:"), 0, 0);
        workExperienceEntry.add(jobTitleField, 1, 0);
        workExperienceEntry.add(new Label("Company:"), 0, 1);
        workExperienceEntry.add(companyField, 1, 1);
        workExperienceEntry.add(new Label("Start Date:"), 0, 2);
        workExperienceEntry.add(startDateField, 1, 2);
        workExperienceEntry.add(new Label("End Date:"), 0, 3);
        workExperienceEntry.add(endDateField, 1, 3);
        workExperienceEntry.add(new Label("Description:"), 0, 4);
        workExperienceEntry.add(descriptionArea, 1, 4);

        Button removeButton = new Button("Remove");
        removeButton.setStyle("-fx-background-color: #E31A22; -fx-text-fill: white;");
        removeButton.setOnAction(e -> workExperienceContainer.getChildren().remove(workExperienceEntry));
        workExperienceEntry.add(removeButton, 1, 5);

        workExperienceContainer.getChildren().add(workExperienceEntry);
        clearWorkExperienceFields();
    }

    private boolean validateEmail() {
        String email = emailField.getText().trim();
        if (!email.matches(EMAIL_REGEX)) {
            emailField.setStyle("-fx-border-color: red;");
            showAlert("Invalid Email", "Please enter a valid email address.");
            return false;
        }
        emailField.setStyle("");
        return true;
    }




    private boolean validateEducationFields() {
        if (institutionComboBox.getValue() == null ||
                degreeLevelComboBox.getValue() == null ||
                specializationComboBox.getValue() == null) {
            showAlert("Info", "Veuillez remplir tous les champs");
            return false;
        }
        return true;
    }
    private boolean validateWorkExperienceFields() {
        if (jobTitleField.getText().trim().isEmpty() ||
                companyField.getText().trim().isEmpty() ||
                startDateField.getValue() == null) {
            showAlert("Info", "Veuillez remplir tous les champs obligatoires");
            return false;
        }
        return true;

    }
    @FXML
    private void autoFillForm() {
        // Personal Information
        nameField.setText("Mohamed Abidi");
        emailField.setText("mohamed.abidi@example.com");
        phoneField.setText("+21612345678");
        addressArea.setText("123 Rue de Tunis, Tunis, Tunisia");
        linkedinField.setText("linkedin.com/in/mohamedabidi");
        portfolioField.setText("mohamedabidi.com");
        summaryArea.setText("Experienced software engineer with a strong background in developing scalable web applications.");

        // Education Information
        institutionComboBox.setValue("ESPRIM");
        Platform.runLater(() -> {
            degreeLevelComboBox.setValue("Cycle IngÃ©nieur");
            Platform.runLater(() -> {
                specializationComboBox.setValue("GÃ©nie Informatique");
                graduationDateField.setValue(LocalDate.now().minusYears(1));
                addEducation();
            });
        });

        // Work Experience
        jobTitleField.setText("Software Engineer");
        companyField.setText("Tech Company");
        startDateField.setValue(LocalDate.now().minusYears(2));
        endDateField.setValue(LocalDate.now());
        descriptionArea.setText("Developed and maintained enterprise web applications using Java and Spring Boot.");
        addWorkExperience();
    }

    private void clearEducationFields() {
        institutionComboBox.setValue(null);
        degreeLevelComboBox.setValue(null);
        specializationComboBox.setValue(null);
        graduationDateField.setValue(null);
    }

    private void clearWorkExperienceFields() {
        jobTitleField.clear();
        companyField.clear();
        startDateField.setValue(null);
        endDateField.setValue(null);
        descriptionArea.clear();
    }


    @FXML
    private void showSummaryHelp() {
        showAlert("Summary Help",
                "Write a brief professional summary highlighting your key qualifications, " +
                        "experience, and career objectives. Keep it concise and impactful.");
    }


    @FXML
    private void goToPage2() {
        try {
            // 1. Validation complÃ¨te des champs
            if (!validateRequiredFields()) {
                return;
            }

            // 2. Validation du format des donnÃ©es
            if (!validateDataFormat()) {
                return;
            }

            // 3. CrÃ©ation du CV avec les donnÃ©es validÃ©es
            CV cv = createCV();
            if (cv == null) {
                showAlert("Erreur", "Impossible de crÃ©er le CV avec les donnÃ©es fournies");
                return;
            }

            // 4. Navigation vers Page 2 via NavigationManager
            Stage stage = (Stage) nextButton.getScene().getWindow();
            NavigationManager.navigateToPage2(stage, cv);

        } catch (Exception e) {
            e.printStackTrace();
            showAlert("Erreur", "Erreur de navigation: " + e.getMessage());
            System.err.println("Erreur dÃ©taillÃ©e: " + e.getMessage());
        }
    }

    private boolean validateRequiredFields() {
        StringBuilder errorMessage = new StringBuilder();

        // VÃ©rification des champs obligatoires
        if (nameField.getText().trim().isEmpty()) {
            errorMessage.append("- Le nom est requis\n");
        }
        if (emailField.getText().trim().isEmpty()) {
            errorMessage.append("- L'email est requis\n");
        }
        if (phoneField.getText().trim().isEmpty()) {
            errorMessage.append("- Le numÃ©ro de tÃ©lÃ©phone est requis\n");
        }
        if (educationContainer.getChildren().isEmpty()) {
            errorMessage.append("- Au moins une formation est requise\n");
        }

        if (errorMessage.length() > 0) {
            showAlert("Champs Requis", "Veuillez remplir les champs suivants:\n" + errorMessage.toString());
            return false;
        }
        return true;
    }

    private boolean validateDataFormat() {
        StringBuilder errorMessage = new StringBuilder();

        // Validation du format email
        if (!emailField.getText().trim().matches(EMAIL_REGEX)) {
            errorMessage.append("- Format d'email invalide\n");
        }

        // Validation du format tÃ©lÃ©phone
        if (!phoneField.getText().trim().matches(PHONE_REGEX)) {
            errorMessage.append("- Format de tÃ©lÃ©phone invalide\n");
        }

        // Validation du lien LinkedIn si fourni
        if (!linkedinField.getText().trim().isEmpty() &&
                !linkedinField.getText().trim().matches(LINKEDIN_REGEX)) {
            errorMessage.append("- Format de lien LinkedIn invalide\n");
        }

        if (errorMessage.length() > 0) {
            showAlert("Format Invalide", "Veuillez corriger les erreurs suivantes:\n" + errorMessage.toString());
            return false;
        }
        return true;
    }

    private CV createCV() {
        try {
            CV cv = new CV();

            // Informations personnelles
            cv.setName(nameField.getText().trim());
            cv.setEmail(emailField.getText().trim());
            cv.setPhone(phoneField.getText().trim());
            cv.setAddress(addressArea.getText().trim());
            cv.setLinkedin(linkedinField.getText().trim());
            cv.setPortfolio(portfolioField.getText().trim());
            cv.setSummary(summaryArea.getText().trim());

            // Formations
            for (Node node : educationContainer.getChildren()) {
                if (node instanceof GridPane) {
                    processEducationData(cv, (GridPane) node);
                }
            }

            // ExpÃ©riences professionnelles
            for (Node node : workExperienceContainer.getChildren()) {
                if (node instanceof GridPane) {
                    processWorkExperienceData(cv, (GridPane) node);
                }
            }

            // Log pour dÃ©bogage
            System.out.println("CV crÃ©Ã© avec succÃ¨s pour : " + cv.getName());
            System.out.println("Date et heure de crÃ©ation (UTC): " +
                    LocalDateTime.now(ZoneOffset.UTC).format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")));
            System.out.println("Utilisateur : " + System.getProperty("user.name"));

            return cv;

        } catch (Exception e) {
            e.printStackTrace();
            showAlert("Erreur", "Erreur lors de la crÃ©ation du CV: " + e.getMessage());
            return null;
        }
    }

    private boolean validateAllFields() {
        // VÃ©rification minimale
        if (nameField.getText().trim().isEmpty() ||
                emailField.getText().trim().isEmpty() ||
                phoneField.getText().trim().isEmpty()) {
            showAlert("Erreur", "Veuillez remplir les champs obligatoires");
            return false;
        }

        // VÃ©rifier qu'il y a au moins une formation
        if (educationContainer.getChildren().isEmpty()) {
            showAlert("Erreur", "Ajoutez au moins une formation");
            return false;
        }

        return true;
    }
    private void showAlert(String title, String message) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle(title);
        alert.setContentText(message);
        alert.showAndWait();
    }
    public void setData(CV cv) {
        if (cv != null) {
            // Personal Information
            nameField.setText(cv.getName());
            emailField.setText(cv.getEmail());
            phoneField.setText(cv.getPhone());
            addressArea.setText(cv.getAddress());
            linkedinField.setText(cv.getLinkedin());
            portfolioField.setText(cv.getPortfolio());
            summaryArea.setText(cv.getSummary());

            // Load education entries
            cv.getEducations().forEach(education -> {
                // First set the institution
                institutionComboBox.setValue(education.getInstitution());

                Platform.runLater(() -> {
                    String degreeLevel = determineDegreeLevel(education.getDegree());
                    degreeLevelComboBox.setValue(degreeLevel);

                    Platform.runLater(() -> {
                        specializationComboBox.setValue(education.getDegree());
                        graduationDateField.setValue(education.getGraduationDate());
                        addEducation();
                    });
                });
            });

            // Load work experience entries
            cv.getWorkExperiences().forEach(experience -> {
                jobTitleField.setText(experience.getJobTitle());
                companyField.setText(experience.getCompany());
                if (experience.getStartDate() != null) {
                    startDateField.setValue(experience.getStartDate());
                }
                if (experience.getEndDate() != null) {
                    endDateField.setValue(experience.getEndDate());
                }
                descriptionArea.setText(experience.getDescription());
                addWorkExperience();
            });
        }
    }



    // Helper method to determine degree level from degree name
    private String determineDegreeLevel(String degree) {
        if (degree.toLowerCase().contains("master")) {
            return "Master";
        } else if (degree.toLowerCase().contains("licence")) {
            return "Licence";
        } else {
            return "Cycle IngÃ©nieur";
        }
    }

    public CV getData() {
        try {
            CV cv = new CV();
            cv.setName(nameField.getText().trim());
            cv.setEmail(emailField.getText().trim());
            cv.setPhone(phoneField.getText().trim());
            cv.setAddress(addressArea.getText().trim());
            cv.setLinkedin(linkedinField.getText().trim());
            cv.setPortfolio(portfolioField.getText().trim());
            cv.setSummary(summaryArea.getText().trim());

            // Process education entries
            for (Node node : educationContainer.getChildren()) {
                if (node instanceof GridPane) {
                    processEducationData(cv, (GridPane) node);
                }
            }

            // Process work experience entries
            for (Node node : workExperienceContainer.getChildren()) {
                if (node instanceof GridPane) {
                    processWorkExperienceData(cv, (GridPane) node);
                }
            }

            return cv;
        } catch (Exception e) {
            System.err.println("Error creating CV: " + e.getMessage());
            e.printStackTrace();
            showAlert("Error", "Failed to create CV: " + e.getMessage());
            return null;
        }
    }
    private void processWorkExperienceData(CV cv, GridPane grid) {
        TextField jobTitleField = (TextField) getNodeByRowColumn(grid, 0, 1);
        TextField companyField = (TextField) getNodeByRowColumn(grid, 1, 1);
        DatePicker startDatePicker = (DatePicker) getNodeByRowColumn(grid, 2, 1);
        DatePicker endDatePicker = (DatePicker) getNodeByRowColumn(grid, 3, 1);
        TextArea descriptionArea = (TextArea) getNodeByRowColumn(grid, 4, 1);

        if (jobTitleField != null && companyField != null) {
            String jobTitle = jobTitleField.getText().trim();
            String company = companyField.getText().trim();

            if (!jobTitle.isEmpty() && !company.isEmpty()) {
                try {
                    WorkExperience experience = new WorkExperience(jobTitle, company);

                    if (startDatePicker != null && startDatePicker.getValue() != null) {
                        experience.setStartDate(startDatePicker.getValue());
                    }

                    if (endDatePicker != null && endDatePicker.getValue() != null) {
                        experience.setEndDate(endDatePicker.getValue());
                    }

                    if (descriptionArea != null && !descriptionArea.getText().trim().isEmpty()) {
                        experience.setDescription(descriptionArea.getText().trim());
                    }

                    cv.addWorkExperience(experience);
                } catch (IllegalArgumentException e) {
                    System.err.println("Error creating work experience: " + e.getMessage());
                    showAlert("Error", "Invalid work experience entry: " + e.getMessage());
                }
            }
        }
    }
    private void processEducationData(CV cv, GridPane grid) {
        try {
            // Get labels from grid
            Node degreeNode = getNodeByRowColumn(grid, 0, 1);
            Node institutionNode = getNodeByRowColumn(grid, 1, 1);
            Node levelNode = getNodeByRowColumn(grid, 2, 1);
            Node dateNode = getNodeByRowColumn(grid, 3, 1);

            if (degreeNode instanceof Label &&
                    institutionNode instanceof Label &&
                    levelNode instanceof Label &&
                    dateNode instanceof DatePicker) {

                String degree = ((Label) degreeNode).getText();
                String institution = ((Label) institutionNode).getText();
                String levelText = ((Label) levelNode).getText();
                LocalDate graduationDate = ((DatePicker) dateNode).getValue();
                cv.setInstitution(institution);

                // DÃ©finir le type de programme en fonction du degrÃ©
                if (degree.contains("GÃ©nie Informatique")) {
                    cv.setProgramType(CV.ProgramType.ENGINEERING_IT);
                } else if (degree.contains("GÃ©nie des TÃ©lÃ©communications")) {
                    cv.setProgramType(CV.ProgramType.ENGINEERING_TELECOM);
                } else if (degree.contains("GÃ©nie Ã‰lectromÃ©canique")) {
                    cv.setProgramType(CV.ProgramType.ENGINEERING_ELECTROMECH);
                } else if (degree.contains("GÃ©nie MÃ©catronique")) {
                    cv.setProgramType(CV.ProgramType.ENGINEERING_MECHATRONICS);
                } else if (degree.contains("GÃ©nie Civil")) {
                    cv.setProgramType(CV.ProgramType.ENGINEERING_CIVIL);
                } else if (degree.contains("Business Computing")) {
                    cv.setProgramType(CV.ProgramType.LICENSE_BUSINESS_COMPUTING);
                } else if (degree.contains("MathÃ©matiques AppliquÃ©es")) {
                    cv.setProgramType(CV.ProgramType.LICENSE_MATH_APPLIED);
                } else if (degree.contains("Business Analytics")) {
                    cv.setProgramType(CV.ProgramType.MASTER_BUSINESS_ANALYTICS);
                } else if (degree.contains("MDSI")) {
                    cv.setProgramType(CV.ProgramType.MASTER_MDSI);
                } else if (degree.contains("CCA")) {
                    cv.setProgramType(CV.ProgramType.MASTER_CCA);
                } else if (degree.contains("FIND")) {
                    cv.setProgramType(CV.ProgramType.MASTER_FIND);
                }

                // Convert level text to Education.EducationLevel enum
                Education.EducationLevel level;
                if (levelText.contains("Cycle IngÃ©nieur")) {
                    level = Education.EducationLevel.ENGINEERING;
                } else if (levelText.contains("Master")) {
                    level = Education.EducationLevel.MASTER;
                } else if (levelText.contains("Licence")) {
                    level = Education.EducationLevel.LICENSE;
                } else {
                    level = Education.EducationLevel.OTHER;
                }

                // Create education object
                Education education = new Education(degree, institution, graduationDate, level);

                // Set specialization if it's engineering
                if (level == Education.EducationLevel.ENGINEERING) {
                    for (Education.EngineeringSpecialization spec : Education.EngineeringSpecialization.values()) {
                        if (degree.contains(spec.getDisplayName())) {
                            education.setSpecialization(spec);
                            break;
                        }
                    }
                }

                cv.addEducation(education);
            }
        } catch (Exception e) {
            System.err.println("Error processing education data: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private Node getNodeByRowColumn(GridPane gridPane, int row, int column) {
        for (Node node : gridPane.getChildren()) {
            Integer rowIndex = GridPane.getRowIndex(node);
            Integer columnIndex = GridPane.getColumnIndex(node);

            if (rowIndex != null && columnIndex != null &&
                    rowIndex == row && columnIndex == column) {
                return node;
            }
        }
        return null;
    }
}
==================================================

Fichier: src\main\java\com\example\stage\controller\Page2Controller.java
Chemin complet: C:\Users\Sh-Pc\Desktop\HomeFORNOW\KHEDMA\src\main\java\com\example\stage\controller\Page2Controller.java
-----
package com.example.stage.controller;

import com.example.stage.model.*;
import com.example.stage.service.PDFGenerationService;
import com.example.stage.util.ResourceManager;
import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.application.Platform;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.geometry.Insets;
import javafx.geometry.NodeOrientation;
import javafx.geometry.Pos;
import javafx.scene.Node;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.input.KeyCode;
import javafx.scene.layout.*;
import javafx.stage.Stage;
import javafx.collections.FXCollections;
import javafx.util.Duration;

import java.io.File;
import java.io.IOException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.ZoneOffset;
import java.time.format.DateTimeFormatter;
import java.util.Locale;

public class Page2Controller {
    @FXML private Label skillsLabel;
    @FXML private Label projectsLabel;
    @FXML private Label certificatesLabel;
    @FXML private Label languagesLabel;
    @FXML private VBox skillsContainer;
    @FXML private TextField skillsField;
    @FXML private VBox projectsContainer;
    @FXML private VBox certificatesContainer;
    @FXML private VBox languagesContainer;
    @FXML private Label timeUserLabel;
    @FXML private TextField projectNameField;
    @FXML private TextArea projectDescriptionArea;
    @FXML private TextField certificateNameField;
    @FXML private TextField certificateInstitutionField;
    @FXML private DatePicker certificateDateField;
    @FXML private TextField languageField;
    @FXML private ComboBox<String> languageProficiencyField;
    @FXML private ComboBox<String> languageComboBox;

    @FXML private Button backButton;
    @FXML private Button generatePDFButton;
    @FXML private Button translateButton;
    @FXML private Button autoFillButton;
    @FXML private Label statusLabel;
    private static final int MAX_SKILLS = 10;
    private static final int MAX_PROJECTS = 5;
    private static final int MAX_CERTIFICATES = 5;
    private static final int MAX_LANGUAGES = 5;
    private static final int MAX_DESCRIPTION_LENGTH = 500;

    private final PDFGenerationService pdfGenerationService;
    private CV cv;

    public Page2Controller() {
        this.pdfGenerationService = new PDFGenerationService();
        this.cv = new CV();
    }
    public void setCV(CV cv) {
        this.cv = cv;
        loadCVData();
    }

    @FXML
    private void initialize() {
        setupContainers();
        setupLanguageProficiencyComboBox();
        setupValidations();
        setupProjectDescriptionLimit();
        setupSkillField();
        updateTranslations();




    }



    private void setupLanguageComboBox() {
        if (languageComboBox != null) {
            languageComboBox.getItems().addAll("English", "French", "German", "Arabic");
            languageComboBox.setValue("English");
        }
    }
    private void setupContainers() {
        if (skillsContainer == null) skillsContainer = new VBox(5);
        if (projectsContainer == null) projectsContainer = new VBox(5);
        if (certificatesContainer == null) certificatesContainer = new VBox(5);
        if (languagesContainer == null) languagesContainer = new VBox(5);
    }

    private void setupLanguageProficiencyComboBox() {
        if (languageProficiencyField != null) {
            languageProficiencyField.setItems(FXCollections.observableArrayList(
                    "A1 (Beginner)",
                    "A2 (Elementary)",
                    "B1 (Intermediate)",
                    "B2 (Upper Intermediate)",
                    "C1 (Advanced)",
                    "C2 (Mastery)"
            ));
        }
    }
    @FXML
    private void translatePage() {
        String selectedLanguage = languageComboBox.getValue();
        Locale locale = switch (selectedLanguage) {
            case "French" -> Locale.FRENCH;
            case "German" -> Locale.GERMAN;
            case "Arabic" -> Locale.forLanguageTag("ar");
            default -> Locale.ENGLISH;
        };
        ResourceManager.setLocale(locale);
        updateTranslations();
    }

    private void updateTranslations() {
        // Mettre Ã  jour les labels
        skillsLabel.setText(ResourceManager.getString("skills"));
        projectsLabel.setText(ResourceManager.getString("projects"));
        certificatesLabel.setText(ResourceManager.getString("certificates"));
        languagesLabel.setText(ResourceManager.getString("languages"));

        // Mettre Ã  jour les boutons
        backButton.setText(ResourceManager.getString("back"));
        generatePDFButton.setText(ResourceManager.getString("generate_pdf"));
        translateButton.setText(ResourceManager.getString("translate"));
        autoFillButton.setText(ResourceManager.getString("auto_fill"));

        // Mettre Ã  jour les textes des champs
        skillsField.setPromptText(ResourceManager.getString("enter_skill"));
        projectNameField.setPromptText(ResourceManager.getString("enter_project_name"));
        projectDescriptionArea.setPromptText(ResourceManager.getString("enter_project_description"));
        certificateNameField.setPromptText(ResourceManager.getString("enter_certificate_name"));
        certificateInstitutionField.setPromptText(ResourceManager.getString("enter_institution"));
        languageField.setPromptText(ResourceManager.getString("enter_language"));
    }

    private void setupValidations() {
        // Garder uniquement la validation du nombre maximum de compÃ©tences
        if (skillsField != null) {
            skillsField.textProperty().addListener((obs, old, newVal) -> {
                if (skillsContainer.getChildren().size() >= MAX_SKILLS) {
                    skillsField.setText(old);
                    showAlert("Info", "Maximum de compÃ©tences atteint");
                }
            });
        }
    }

    private void showAlert(String info, String maximumDeCompÃ©tencesAtteint) {
    }

    private void setupProjectDescriptionLimit() {
        if (projectDescriptionArea != null) {
            projectDescriptionArea.textProperty().addListener((obs, old, newVal) -> {
                if (newVal.length() > MAX_DESCRIPTION_LENGTH) {
                    projectDescriptionArea.setText(old);
                    showAlert(Alert.AlertType.WARNING, "Text Limit",
                            "Project description cannot exceed " + MAX_DESCRIPTION_LENGTH + " characters.");
                }
            });
        }
    }

    @FXML
    private void addSkill() {
        String skill = skillsField.getText().trim();

        if (skill.isEmpty()) {
            showAlert(Alert.AlertType.WARNING, "Validation Error", "Skill cannot be empty.");
            return;
        }

        if (skillsContainer.getChildren().size() >= MAX_SKILLS) {
            showAlert(Alert.AlertType.WARNING, "Limit Reached",
                    "Maximum number of skills (" + MAX_SKILLS + ") reached.");
            return;
        }

        HBox skillEntry = new HBox(10);
        skillEntry.setAlignment(Pos.CENTER_LEFT);
        skillEntry.setPrefWidth(520);
        skillEntry.setPadding(new Insets(10));
        skillEntry.setStyle("-fx-border-color: #E8E8E8; -fx-border-radius: 5; -fx-background-color: #FFFFFF");

        Label skillLabel = new Label(skill);
        skillLabel.setStyle("-fx-font-weight: bold; -fx-font-size: 14px");
        skillLabel.setMaxWidth(400);

        Button removeButton = createRemoveButton(skillEntry);
        removeButton.setPrefWidth(80);

        Region spacer = new Region();
        HBox.setHgrow(spacer, Priority.ALWAYS);

        skillEntry.getChildren().addAll(skillLabel, spacer, removeButton);
        skillsContainer.getChildren().add(skillEntry);

        skillsField.clear();
        skillsField.requestFocus();
    }
    private void setupSkillField() {
        if (skillsField != null) {
            // Set node orientation to LEFT_TO_RIGHT for consistent behavior
            skillsField.setNodeOrientation(NodeOrientation.LEFT_TO_RIGHT);

            // Simple validation for length only
            skillsField.textProperty().addListener((observable, oldValue, newValue) -> {
                if (newValue != null && newValue.length() > 50) {
                    skillsField.setText(oldValue);
                }
            });

            // Handle Enter key to add skill
            skillsField.setOnKeyPressed(event -> {
                if (event.getCode() == KeyCode.ENTER && !skillsField.getText().trim().isEmpty()) {
                    addSkill();
                }
            });
        }
    }

    @FXML
    private void addProject() {
        if (!validateProjectFields()) return;

        VBox projectEntry = new VBox(10);
        projectEntry.setPadding(new Insets(10));
        projectEntry.setPrefWidth(520);
        projectEntry.setStyle("-fx-border-color: #E8E8E8; -fx-border-radius: 5; -fx-background-color: #FFFFFF");

        HBox header = new HBox(10);
        header.setAlignment(Pos.CENTER_LEFT);

        Label nameLabel = new Label(projectNameField.getText());
        nameLabel.setStyle("-fx-font-weight: bold; -fx-font-size: 14px");

        Button removeButton = createRemoveButton(projectEntry);
        removeButton.setPrefWidth(80);

        Region spacer = new Region();
        HBox.setHgrow(spacer, Priority.ALWAYS);
        header.getChildren().addAll(nameLabel, spacer, removeButton);

        TextArea descArea = new TextArea(projectDescriptionArea.getText());
        descArea.setWrapText(true);
        descArea.setPrefRowCount(3);
        descArea.setPrefWidth(500);
        descArea.setEditable(false);
        descArea.setStyle("-fx-control-inner-background: #F8F8F8");

        projectEntry.getChildren().addAll(header, descArea);
        projectsContainer.getChildren().add(projectEntry);
        clearProjectFields();
    }


    @FXML
    private void addCertificate() {
        if (!validateCertificateFields()) return;

        VBox certEntry = new VBox(10);
        certEntry.setPadding(new Insets(10));
        certEntry.setPrefWidth(520);
        certEntry.setStyle("-fx-border-color: #E8E8E8; -fx-border-radius: 5; -fx-background-color: #FFFFFF");

        HBox header = new HBox(10);
        header.setAlignment(Pos.CENTER_LEFT);

        VBox certInfo = new VBox(5);
        Label nameLabel = new Label(certificateNameField.getText());
        nameLabel.setStyle("-fx-font-weight: bold; -fx-font-size: 14px");
        Label institutionLabel = new Label("Institution: " + certificateInstitutionField.getText());
        institutionLabel.setStyle("-fx-font-size: 12px");
        Label dateLabel = new Label("Date: " + certificateDateField.getValue().toString());
        dateLabel.setStyle("-fx-font-size: 12px");
        certInfo.getChildren().addAll(nameLabel, institutionLabel, dateLabel);

        Button removeButton = createRemoveButton(certEntry);
        removeButton.setPrefWidth(80);

        Region spacer = new Region();
        HBox.setHgrow(spacer, Priority.ALWAYS);

        header.getChildren().addAll(certInfo, spacer, removeButton);
        certEntry.getChildren().add(header);

        certificatesContainer.getChildren().add(certEntry);
        clearCertificateFields();
    }
    @FXML
    private void addLanguage() {
        if (!validateLanguageFields()) return;

        HBox langEntry = new HBox(10);
        langEntry.setAlignment(Pos.CENTER_LEFT);
        langEntry.setPrefWidth(520);
        langEntry.setPadding(new Insets(10));
        langEntry.setStyle("-fx-border-color: #E8E8E8; -fx-border-radius: 5; -fx-background-color: #FFFFFF");

        VBox langInfo = new VBox(5);
        Label langLabel = new Label(languageField.getText());
        langLabel.setStyle("-fx-font-weight: bold; -fx-font-size: 14px");
        Label profLabel = new Label("Level: " + languageProficiencyField.getValue());
        profLabel.setStyle("-fx-font-size: 12px");
        langInfo.getChildren().addAll(langLabel, profLabel);

        Button removeButton = createRemoveButton(langEntry);
        removeButton.setPrefWidth(80);

        Region spacer = new Region();
        HBox.setHgrow(spacer, Priority.ALWAYS);

        langEntry.getChildren().addAll(langInfo, spacer, removeButton);
        languagesContainer.getChildren().add(langEntry);
        clearLanguageFields();
    }

    private Button createRemoveButton(Node parent) {
        Button removeButton = new Button("Remove");
        removeButton.setStyle("-fx-background-color: #E31A22; -fx-text-fill: white;");
        removeButton.setPrefWidth(80);

        if (parent instanceof HBox) {
            removeButton.setOnAction(e -> skillsContainer.getChildren().remove(parent));
        } else {
            removeButton.setOnAction(e -> ((VBox) parent.getParent()).getChildren().remove(parent));
        }

        return removeButton;
    }
    private void updateCVModel() {
        // Update skills
        cv.getSkills().clear();
        skillsContainer.getChildren().forEach(node -> {
            if (node instanceof HBox) {
                HBox skillEntry = (HBox) node;
                skillEntry.getChildren().stream()
                        .filter(child -> child instanceof Label)
                        .map(child -> (Label) child)
                        .findFirst()
                        .ifPresent(label -> cv.addSkill(label.getText()));
            }
        });

        // Update projects
        cv.getProjects().clear();
        projectsContainer.getChildren().forEach(node -> {
            if (node instanceof VBox) {
                VBox projectEntry = (VBox) node;
                HBox header = (HBox) projectEntry.getChildren().get(0);
                Label nameLabel = (Label) header.getChildren().get(0);
                TextArea descArea = (TextArea) projectEntry.getChildren().get(1);

                Project project = new Project(
                        nameLabel.getText(),
                        descArea.getText()
                );
                cv.addProject(project);
            }
        });

        // Update certificates
        cv.getCertificates().clear();
        certificatesContainer.getChildren().forEach(node -> {
            if (node instanceof VBox) {
                VBox certEntry = (VBox) node;
                HBox header = (HBox) certEntry.getChildren().get(0);
                VBox certInfo = (VBox) header.getChildren().get(0);

                Label nameLabel = (Label) certInfo.getChildren().get(0);
                Label institutionLabel = (Label) certInfo.getChildren().get(1);
                Label dateLabel = (Label) certInfo.getChildren().get(2);

                String name = nameLabel.getText();
                String institution = institutionLabel.getText().replace("Institution: ", "");
                String dateText = dateLabel.getText().replace("Date: ", "");
                LocalDate date = LocalDate.parse(dateText);

                Certificate certificate = new Certificate(
                        name,
                        institution,
                        date,
                        Certificate.CertificateType.TECHNICAL
                );
                cv.addCertificate(certificate);
            }
        });

        // Update languages
        cv.getLanguages().clear();
        languagesContainer.getChildren().forEach(node -> {
            if (node instanceof HBox) {
                HBox langEntry = (HBox) node;
                VBox langInfo = (VBox) langEntry.getChildren().get(0);

                Label langLabel = (Label) langInfo.getChildren().get(0);
                Label profLabel = (Label) langInfo.getChildren().get(1);

                String languageName = langLabel.getText();
                String proficiency = profLabel.getText().replace("Level: ", "");

                // Extraire le niveau de compÃ©tence (A1, A2, B1, B2, C1, C2)
                String level = proficiency.substring(0, 2);
                Language.ProficiencyLevel profLevel = Language.ProficiencyLevel.valueOf(level);

                Language language = new Language(languageName, profLevel);
                cv.addLanguage(language);
            }
        });
    }

    private void showAlert(Alert.AlertType type, String title, String content) {
        Alert alert = new Alert(type);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(content);
        alert.showAndWait();
    }

    private boolean validateProjectFields() {
        return !projectNameField.getText().trim().isEmpty() &&
                !projectDescriptionArea.getText().trim().isEmpty();
    }

    private boolean validateCertificateFields() {
        return !certificateNameField.getText().trim().isEmpty() &&
                certificateDateField.getValue() != null;
    }

    private boolean validateLanguageFields() {
        return !languageField.getText().trim().isEmpty() &&
                languageProficiencyField.getValue() != null;
    }
    private void clearProjectFields() {
        projectNameField.clear();
        projectDescriptionArea.clear();
    }

    private void clearCertificateFields() {
        certificateNameField.clear();
        certificateInstitutionField.clear();
        certificateDateField.setValue(null);
    }

    private void clearLanguageFields() {
        languageField.clear();
        languageProficiencyField.setValue(null);
    }

    @FXML
    private void generatePDF() {
        try {
            updateCVModel();

            // CrÃ©er le dossier output s'il n'existe pas
            File outputDir = new File("output");
            if (!outputDir.exists()) {
                outputDir.mkdirs();
            }

            // CrÃ©er un nom de fichier unique avec le nom d'utilisateur et timestamp
            String timestamp = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd_HH-mm-ss"));
            String userName = cv.getName().replaceAll("[^a-zA-Z0-9]", "_");
            String fileName = String.format("cv_%s_%s.pdf", userName, timestamp);
            String filePath = "output" + File.separator + fileName;

            pdfGenerationService.generatePDF(cv, filePath);

            showAlert(Alert.AlertType.INFORMATION, "SuccÃ¨s",
                    "CV gÃ©nÃ©rÃ© avec succÃ¨s!\nChemin du fichier:\n" + new File(filePath).getAbsolutePath());

        } catch (Exception e) {
            e.printStackTrace();
            showAlert(Alert.AlertType.ERROR, "Erreur",
                    "Ã‰chec de la gÃ©nÃ©ration du PDF: " + e.getMessage());
        }
    }
    private void loadCVData() {
        if (cv == null) return;

        Platform.runLater(() -> {
            // Load skills
            cv.getSkills().forEach(skill -> {
                HBox skillEntry = new HBox(10);
                Label skillLabel = new Label(skill);
                Button removeButton = createRemoveButton(skillEntry);
                skillEntry.getChildren().addAll(skillLabel, removeButton);
                skillsContainer.getChildren().add(skillEntry);
            });

            // Load projects
            cv.getProjects().forEach(project -> {
                GridPane projectEntry = new GridPane();
                projectEntry.setHgap(10);
                projectEntry.setVgap(10);

                Label nameLabel = new Label(project.getName());
                TextArea descArea = new TextArea(project.getDescription());
                descArea.setWrapText(true);
                descArea.setPrefRowCount(2);
                descArea.setEditable(false);

                projectEntry.add(new Label("Project:"), 0, 0);
                projectEntry.add(nameLabel, 1, 0);
                projectEntry.add(new Label("Description:"), 0, 1);
                projectEntry.add(descArea, 1, 1);

                Button removeButton = createRemoveButton(projectEntry);
                projectEntry.add(removeButton, 1, 2);

                projectsContainer.getChildren().add(projectEntry);
            });
            // Load certificates
            cv.getCertificates().forEach(certificate -> {
                GridPane certificateEntry = createCertificateEntry(certificate);
                certificatesContainer.getChildren().add(certificateEntry);
            });

            // Load languages
            cv.getLanguages().forEach(language -> {
                GridPane languageEntry = createLanguageEntry(language);
                languagesContainer.getChildren().add(languageEntry);
            });
        });
    }

    private GridPane createCertificateEntry(Certificate certificate) {
        GridPane entry = new GridPane();
        entry.setHgap(10);
        entry.setVgap(10);

        entry.add(new Label("Certificate:"), 0, 0);
        entry.add(new Label(certificate.getName()), 1, 0);
        entry.add(new Label("Institution:"), 0, 1);
        entry.add(new Label(certificate.getInstitution()), 1, 1);
        entry.add(new Label("Date:"), 0, 2);
        entry.add(new Label(certificate.getDateReceived().toString()), 1, 2);

        Button removeButton = createRemoveButton(entry);
        entry.add(removeButton, 1, 3);

        return entry;
    }

    private GridPane createLanguageEntry(Language language) {
        GridPane entry = new GridPane();
        entry.setHgap(10);
        entry.setVgap(10);

        entry.add(new Label("Language:"), 0, 0);
        entry.add(new Label(language.getName()), 1, 0);
        entry.add(new Label("Proficiency:"), 0, 1);
        entry.add(new Label(language.getProficiencyDescription()), 1, 1);

        Button removeButton = createRemoveButton(entry);
        entry.add(removeButton, 1, 2);

        return entry;
    }

    private Node getNodeByRowColumn(GridPane gridPane, int row, int column) {
        for (Node node : gridPane.getChildren()) {
            Integer rowIndex = GridPane.getRowIndex(node);
            Integer columnIndex = GridPane.getColumnIndex(node);

            // Handle null indices (default to 0)
            if (rowIndex == null) rowIndex = 0;
            if (columnIndex == null) columnIndex = 0;

            if (rowIndex == row && columnIndex == column) {
                return node;
            }
        }
        return null;
    }
    @FXML
    public void goToPage1(ActionEvent actionEvent) {
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/com/example/stage/page1.fxml"));
            AnchorPane page1 = loader.load();
            Scene scene = new Scene(page1, 600, 900);
            Stage stage = (Stage) backButton.getScene().getWindow();
            stage.setScene(scene);
        } catch (IOException e) {
            e.printStackTrace();
            showAlert(Alert.AlertType.ERROR, "Navigation Error",
                    "Could not return to previous page: " + e.getMessage());
        }
    }

    @FXML
    public void showProjectHelp(ActionEvent actionEvent) {
        showAlert(Alert.AlertType.INFORMATION, "Project Help",
                "Projects should include:\n" +
                        "- A clear, concise name\n" +
                        "- Detailed description (max 500 characters)\n" +
                        "- Key achievements and technologies used\n" +
                        "- Your role and responsibilities\n\n" +
                        "Tips:\n" +
                        "- Use action verbs to start descriptions\n" +
                        "- Include measurable outcomes\n" +
                        "- Highlight technical skills used"
        );
    }

    @FXML
    public void showSkillsHelp(ActionEvent actionEvent) {
        showAlert(Alert.AlertType.INFORMATION, "Skills Help",
                "Skills tips:\n" +
                        "- List relevant technical skills\n" +
                        "- Include both hard and soft skills\n" +
                        "- Be specific (e.g., 'Java' instead of 'Programming')\n" +
                        "- List skills you're comfortable discussing\n" +
                        "- Maximum 10 skills allowed\n\n" +
                        "Click 'Auto Fill' to see example skills."
        );
    }

    @FXML
    public void translatePage(ActionEvent actionEvent) {
        showAlert(Alert.AlertType.INFORMATION, "Translation",
                "Translation feature coming soon!\n" +
                        "This will allow you to translate your CV content to different languages.");
    }

    @FXML
    public void autoFillForm(ActionEvent actionEvent) {
        Platform.runLater(() -> {
            try {
                // Sauvegarder les formulaires d'entrÃ©e
                Node projectForm = projectsContainer.getChildren().isEmpty() ? null :
                        projectsContainer.getChildren().get(0);
                Node certForm = certificatesContainer.getChildren().isEmpty() ? null :
                        certificatesContainer.getChildren().get(0);
                Node langForm = languagesContainer.getChildren().isEmpty() ? null :
                        languagesContainer.getChildren().get(0);

                // Clear existing entries
                skillsContainer.getChildren().clear();
                projectsContainer.getChildren().clear();
                certificatesContainer.getChildren().clear();
                languagesContainer.getChildren().clear();

                // Restaurer les formulaires d'entrÃ©e
                if (projectForm != null) projectsContainer.getChildren().add(projectForm);
                if (certForm != null) certificatesContainer.getChildren().add(certForm);
                if (langForm != null) languagesContainer.getChildren().add(langForm);

                // Add sample skills
                String[] sampleSkills = {
                        "Java Programming", "JavaFX", "Spring Boot",
                        "Git", "SQL", "Problem Solving",
                        "Web Development", "RESTful APIs",
                        "Software Design", "Agile Methodologies"
                };

                for (String skill : sampleSkills) {
                    HBox skillEntry = new HBox(10);
                    skillEntry.setAlignment(Pos.CENTER_LEFT);
                    skillEntry.setPrefWidth(520);

                    Label skillLabel = new Label(skill);
                    skillLabel.setMaxWidth(400);
                    skillLabel.setStyle("-fx-font-size: 14px");

                    Button removeButton = createRemoveButton(skillEntry);

                    Region spacer = new Region();
                    HBox.setHgrow(spacer, Priority.ALWAYS);

                    skillEntry.getChildren().addAll(skillLabel, spacer, removeButton);
                    skillsContainer.getChildren().add(skillEntry);
                }

                // Add sample projects
                Project[] sampleProjects = {
                        new Project("CV Builder Application",
                                "Developed a full-featured CV management system using JavaFX. " +
                                        "Implemented PDF generation, form validation, and data persistence. " +
                                        "The application supports multiple languages and custom templates."),
                        new Project("E-Commerce Platform",
                                "Built a scalable e-commerce solution with Spring Boot and MySQL. " +
                                        "Features include user authentication, product management, " +
                                        "shopping cart functionality, and secure payment integration.")
                };

                for (Project project : sampleProjects) {
                    VBox projectEntry = new VBox(10);
                    projectEntry.setPadding(new Insets(10));
                    projectEntry.setPrefWidth(520);
                    projectEntry.setStyle("-fx-border-color: #E8E8E8; -fx-border-radius: 5; -fx-background-color: #FFFFFF");

                    HBox header = new HBox(10);
                    header.setAlignment(Pos.CENTER_LEFT);
                    Label nameLabel = new Label(project.getName());
                    nameLabel.setStyle("-fx-font-weight: bold; -fx-font-size: 14px");

                    Button removeButton = createRemoveButton(projectEntry);

                    Region spacer = new Region();
                    HBox.setHgrow(spacer, Priority.ALWAYS);
                    header.getChildren().addAll(nameLabel, spacer, removeButton);

                    TextArea descArea = new TextArea(project.getDescription());
                    descArea.setWrapText(true);
                    descArea.setPrefRowCount(3);
                    descArea.setPrefWidth(500);
                    descArea.setEditable(false);
                    descArea.setStyle("-fx-control-inner-background: #F8F8F8");

                    projectEntry.getChildren().addAll(header, descArea);
                    projectsContainer.getChildren().add(projectEntry);
                }

                // Add sample certificates
                Object[][] sampleCertificates = {
                        {"Oracle Certified Professional: Java SE 11", "Oracle", LocalDate.now().minusMonths(6)},
                        {"AWS Certified Developer - Associate", "Amazon Web Services", LocalDate.now().minusMonths(3)},
                        {"Spring Framework Certification", "VMware", LocalDate.now().minusMonths(1)}
                };

                for (Object[] cert : sampleCertificates) {
                    VBox certEntry = new VBox(10);
                    certEntry.setPadding(new Insets(10));
                    certEntry.setPrefWidth(520);
                    certEntry.setStyle("-fx-border-color: #E8E8E8; -fx-border-radius: 5; -fx-background-color: #FFFFFF");

                    HBox header = new HBox(10);
                    header.setAlignment(Pos.CENTER_LEFT);

                    VBox certInfo = new VBox(5);
                    Label nameLabel = new Label((String)cert[0]);
                    nameLabel.setStyle("-fx-font-weight: bold; -fx-font-size: 14px");
                    Label institutionLabel = new Label("Institution: " + (String)cert[1]);
                    institutionLabel.setStyle("-fx-font-size: 12px");
                    Label dateLabel = new Label("Date: " + ((LocalDate)cert[2]).toString());
                    dateLabel.setStyle("-fx-font-size: 12px");
                    certInfo.getChildren().addAll(nameLabel, institutionLabel, dateLabel);

                    Button removeButton = createRemoveButton(certEntry);

                    Region spacer = new Region();
                    HBox.setHgrow(spacer, Priority.ALWAYS);

                    header.getChildren().addAll(certInfo, spacer, removeButton);
                    certEntry.getChildren().add(header);

                    certificatesContainer.getChildren().add(certEntry);
                }

                // Add sample languages
                Object[][] sampleLanguages = {
                        {"English", "C1 (Advanced)"},
                        {"French", "B2 (Upper Intermediate)"},
                        {"Arabic", "C2 (Mastery)"}
                };

                for (Object[] lang : sampleLanguages) {
                    HBox langEntry = new HBox(10);
                    langEntry.setAlignment(Pos.CENTER_LEFT);
                    langEntry.setPrefWidth(520);
                    langEntry.setPadding(new Insets(10));
                    langEntry.setStyle("-fx-border-color: #E8E8E8; -fx-border-radius: 5; -fx-background-color: #FFFFFF");

                    VBox langInfo = new VBox(5);
                    Label langLabel = new Label((String)lang[0]);
                    langLabel.setStyle("-fx-font-weight: bold; -fx-font-size: 14px");
                    Label profLabel = new Label("Level: " + (String)lang[1]);
                    profLabel.setStyle("-fx-font-size: 12px");
                    langInfo.getChildren().addAll(langLabel, profLabel);

                    Button removeButton = createRemoveButton(langEntry);

                    Region spacer = new Region();
                    HBox.setHgrow(spacer, Priority.ALWAYS);

                    langEntry.getChildren().addAll(langInfo, spacer, removeButton);
                    languagesContainer.getChildren().add(langEntry);
                }

            } catch (Exception e) {
                e.printStackTrace();
                showAlert(Alert.AlertType.ERROR, "Error",
                        "An error occurred while auto-filling the form: " + e.getMessage());
            }
        });
    }}
==================================================

Fichier: src\main\java\com\example\stage\util\TranslationService.java
Chemin complet: C:\Users\Sh-Pc\Desktop\HomeFORNOW\KHEDMA\src\main\java\com\example\stage\util\TranslationService.java
-----
package com.example.stage.util;

import java.nio.charset.StandardCharsets;
import java.util.Locale;
import java.util.PropertyResourceBundle;
import java.util.ResourceBundle;
import java.io.InputStreamReader;
import java.io.IOException;

public class TranslationService {

    /**
     * Charge le fichier de traduction pour une langue spÃ©cifique.
     *
     * @param baseName  Le nom de base du fichier d'internationalisation, sans suffixe.
     * @param locale    La locale ciblÃ©e (ex : fr, en, de).
     * @return          Le ResourceBundle contenant les traductions.
     */
    public static ResourceBundle loadBundle(String baseName, Locale locale) {
        String resourceName = baseName + "_" + locale.getLanguage() + ".properties";
        try (InputStreamReader reader = new InputStreamReader(
                TranslationService.class.getResourceAsStream("/" + resourceName), StandardCharsets.UTF_8)) {
            return new PropertyResourceBundle(reader);
        } catch (IOException | NullPointerException e) {
            throw new RuntimeException("Impossible de charger le fichier de ressources : " + resourceName, e);
        }
    }

    /**
     * RÃ©cupÃ¨re une traduction basÃ©e sur une clÃ© et une locale.
     *
     * @param key       La clÃ© de traduction, telle que dÃ©finie dans le fichier.
     * @param baseName  Le nom de base du fichier de ressources (ex : "messages").
     * @param locale    La locale ciblÃ©e (Langue Ã  utiliser).
     * @return          La traduction associÃ©e Ã  la clÃ© ou un texte par dÃ©faut si non trouvÃ©e.
     */
    public static String getTranslation(String baseName, String key, Locale locale) {
        try {
            ResourceBundle bundle = loadBundle(baseName, locale);
            return bundle.getString(key);
        } catch (Exception e) {
            System.err.println("Erreur de traduction pour la clÃ© : " + key);
            return "[" + key + "]";
        }
    }
}
==================================================

Fichier: src\main\java\com\example\stage\service\PDFGenerationService.java
Chemin complet: C:\Users\Sh-Pc\Desktop\HomeFORNOW\KHEDMA\src\main\java\com\example\stage\service\PDFGenerationService.java
-----
package com.example.stage.service;
import com.example.stage.model.*;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.PDPageContentStream;
import org.apache.pdfbox.pdmodel.common.PDRectangle;
import org.apache.pdfbox.pdmodel.font.PDType1Font;
import org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject;
import java.awt.Color;
import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import com.example.stage.model.*;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.List;

public class PDFGenerationService {
    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern("yyyy-MM-dd");

    public void generatePDF(CV cv, String filePath) throws IOException {
        try (PDDocument document = new PDDocument()) {
            PDPage page = new PDPage(PDRectangle.A4);
            document.addPage(page);

            try (PDPageContentStream contentStream = new PDPageContentStream(document, page)) {
                // Ajouter l'en-tÃªte avec logo
                addHeaderWithLogo(document, page, cv);

                int yOffset = 750;  // Position de dÃ©part depuis le haut

                // Informations personnelles
                yOffset = addPersonalInformation(contentStream, cv, yOffset);

                // RÃ©sumÃ© si disponible
                if (cv.getSummary() != null && !cv.getSummary().isEmpty()) {
                    yOffset = addSection(contentStream, "RÃ©sumÃ©", cv.getSummary(), yOffset);
                }

                // Sections spÃ©cifiques selon le type de programme
                addProfileSpecificSections(contentStream, cv, yOffset);

                // Ã‰ducation
                yOffset = addEducationSection(contentStream, cv.getEducations(), yOffset);

                // ExpÃ©rience professionnelle
                yOffset = addWorkExperienceSection(contentStream, cv.getWorkExperiences(), yOffset);

                // Projets
                yOffset = addProjectsSection(contentStream, cv.getProjects(), yOffset);

                // Certifications
                yOffset = addCertificatesSection(contentStream, cv.getCertificates(), yOffset);

                // Langues
                yOffset = addLanguagesSection(contentStream, cv.getLanguages(), yOffset);

                // CompÃ©tences
                addSkillsSection(contentStream, cv.getSkills(), yOffset);
            }

            // Ajout du pied de page
            addFooter(document, page, cv);

            document.save(filePath);
        }
    }
    private void addHeaderWithLogo(PDDocument document, PDPage page, CV cv) throws IOException {
        // VÃ©rifier si l'institution est null
        if (cv.getInstitution() == null) {
            throw new IllegalArgumentException("L'institution ne peut pas Ãªtre null");
        }

        PDImageXObject logo;
        switch (cv.getInstitution()) {
            case "ESPRIT":
                logo = PDImageXObject.createFromFile("src/main/resources/images/esprit-removebg-preview.png", document);
                break;
            case "ESPRIM":
                logo = PDImageXObject.createFromFile("src/main/resources/images/esprim.png", document);
                break;
            case "ESPRIT SCHOOL OF BUSINESS":
                logo = PDImageXObject.createFromFile("src/main/resources/images/esb-removebg-preview.png", document);
                break;
            default:
                throw new IllegalArgumentException("Institution non reconnue: " + cv.getInstitution());
        }

        // Ajouter le logo
        try (PDPageContentStream contentStream = new PDPageContentStream(document, page, PDPageContentStream.AppendMode.APPEND, true)) {
            float scale = 0.3f;
            contentStream.drawImage(logo, 50, page.getMediaBox().getHeight() - 120,
                    logo.getWidth() * scale, logo.getHeight() * scale);
        }
    }
    private void addMechanicalEngineeringSection(PDPageContentStream contentStream, CV cv, int yOffset) throws IOException {
        // Pour le moment, utiliser la section par dÃ©faut
        addDefaultSection(contentStream, cv, yOffset);
    }

    private void addCivilEngineeringSection(PDPageContentStream contentStream, CV cv, int yOffset) throws IOException {
        // Pour le moment, utiliser la section par dÃ©faut
        addDefaultSection(contentStream, cv, yOffset);
    }

    private void addTechnicalBusinessSection(PDPageContentStream contentStream, CV cv, int yOffset) throws IOException {
        // Pour le moment, utiliser la section par dÃ©faut
        addDefaultSection(contentStream, cv, yOffset);
    }

    private void addBusinessAnalyticsSection(PDPageContentStream contentStream, CV cv, int yOffset) throws IOException {
        // Pour le moment, utiliser la section par dÃ©faut
        addDefaultSection(contentStream, cv, yOffset);
    }

    private void addFinanceSection(PDPageContentStream contentStream, CV cv, int yOffset) throws IOException {
        // Pour le moment, utiliser la section par dÃ©faut
        addDefaultSection(contentStream, cv, yOffset);
    }

    private void addDefaultSection(PDPageContentStream contentStream, CV cv, int yOffset) throws IOException {
        // Section vide pour le moment
    }

    private void addITEngineeringSection(PDPageContentStream contentStream, CV cv, int yOffset) throws IOException {
        // Grouper les compÃ©tences par catÃ©gorie
        Map<String, List<String>> skillCategories = new HashMap<>();
        skillCategories.put("Langages de programmation", new ArrayList<>());
        skillCategories.put("Frameworks & Technologies", new ArrayList<>());
        skillCategories.put("Base de donnÃ©es", new ArrayList<>());
        skillCategories.put("DevOps & Outils", new ArrayList<>());

        // Trier les compÃ©tences
        for (String skill : cv.getSkills()) {
            if (skill.toLowerCase().contains("java") || skill.toLowerCase().contains("python") ||
                    skill.toLowerCase().contains("c++") || skill.toLowerCase().contains("javascript")) {
                skillCategories.get("Langages de programmation").add(skill);
            } else if (skill.toLowerCase().contains("spring") || skill.toLowerCase().contains("angular") ||
                    skill.toLowerCase().contains("react") || skill.toLowerCase().contains("node")) {
                skillCategories.get("Frameworks & Technologies").add(skill);
            } else if (skill.toLowerCase().contains("sql") || skill.toLowerCase().contains("mongodb") ||
                    skill.toLowerCase().contains("oracle")) {
                skillCategories.get("Base de donnÃ©es").add(skill);
            } else {
                skillCategories.get("DevOps & Outils").add(skill);
            }
        }

        // Afficher les compÃ©tences par catÃ©gorie
        contentStream.beginText();
        contentStream.setFont(PDType1Font.HELVETICA_BOLD, 14);
        contentStream.newLineAtOffset(50, yOffset);
        contentStream.showText("CompÃ©tences Techniques");
        contentStream.endText();
        yOffset -= 20;

        for (Map.Entry<String, List<String>> category : skillCategories.entrySet()) {
            if (!category.getValue().isEmpty()) {
                contentStream.beginText();
                contentStream.setFont(PDType1Font.HELVETICA_BOLD, 12);
                contentStream.newLineAtOffset(70, yOffset);
                contentStream.showText(category.getKey() + ":");
                contentStream.endText();
                yOffset -= 15;

                contentStream.beginText();
                contentStream.setFont(PDType1Font.HELVETICA, 11);
                contentStream.newLineAtOffset(90, yOffset);
                contentStream.showText(String.join(", ", category.getValue()));
                contentStream.endText();
                yOffset -= 20;
            }
        }

        // Mettre en Ã©vidence les projets techniques
        if (!cv.getProjects().isEmpty()) {
            contentStream.beginText();
            contentStream.setFont(PDType1Font.HELVETICA_BOLD, 14);
            contentStream.newLineAtOffset(50, yOffset);
            contentStream.showText("Projets Techniques Significatifs");
            contentStream.endText();
            yOffset -= 20;

            for (Project project : cv.getProjects()) {
                if (project.getProjectType() == Project.ProjectType.PFE ||
                        project.getProjectType() == Project.ProjectType.ACADEMIC) {

                    contentStream.beginText();
                    contentStream.setFont(PDType1Font.HELVETICA_BOLD, 12);
                    contentStream.newLineAtOffset(70, yOffset);
                    contentStream.showText(project.getName());
                    contentStream.endText();
                    yOffset -= 15;

                    if (!project.getTechnologies().isEmpty()) {
                        contentStream.beginText();
                        contentStream.setFont(PDType1Font.HELVETICA, 11);
                        contentStream.newLineAtOffset(90, yOffset);
                        contentStream.showText("Technologies : " + String.join(", ", project.getTechnologies()));
                        contentStream.endText();
                        yOffset -= 15;
                    }

                    if (project.getDescription() != null) {
                        contentStream.beginText();
                        contentStream.setFont(PDType1Font.HELVETICA, 11);
                        contentStream.newLineAtOffset(90, yOffset);
                        contentStream.showText(project.getDescription());
                        contentStream.endText();
                        yOffset -= 20;
                    }
                }
            }
        }
    }
    private int addPersonalInformation(PDPageContentStream contentStream, CV cv, int yOffset) throws IOException {
        contentStream.beginText();
        contentStream.setFont(PDType1Font.HELVETICA, 12);
        contentStream.newLineAtOffset(50, yOffset);

        if (cv.getName() != null) {
            contentStream.showText("Name: " + cv.getName());
            contentStream.newLineAtOffset(0, -15);
        }

        if (cv.getEmail() != null) {
            contentStream.showText("Email: " + cv.getEmail());
            contentStream.newLineAtOffset(0, -15);
        }

        if (cv.getPhone() != null) {
            contentStream.showText("Phone: " + cv.getPhone());
            contentStream.newLineAtOffset(0, -15);
        }

        if (cv.getAddress() != null) {
            contentStream.showText("Address: " + cv.getAddress());
            contentStream.newLineAtOffset(0, -15);
        }

        if (cv.getLinkedin() != null) {
            contentStream.showText("LinkedIn: " + cv.getLinkedin());
            contentStream.newLineAtOffset(0, -15);
        }

        if (cv.getPortfolio() != null) {
            contentStream.showText("Portfolio: " + cv.getPortfolio());
            contentStream.newLineAtOffset(0, -15);
        }

        contentStream.endText();
        return yOffset - 100;
    }
    private void addFooter(PDDocument document, PDPage page, CV cv) throws IOException {
        try (PDPageContentStream contentStream = new PDPageContentStream(document, page, PDPageContentStream.AppendMode.APPEND, true)) {
            // Ajouter la date de gÃ©nÃ©ration
            contentStream.beginText();
            contentStream.setFont(PDType1Font.HELVETICA, 8);
            contentStream.setNonStrokingColor(Color.GRAY);
            contentStream.newLineAtOffset(50, 30);
            contentStream.showText("GÃ©nÃ©rÃ© le " + LocalDateTime.now().format(
                    DateTimeFormatter.ofPattern("dd/MM/yyyy Ã  HH:mm")));
            contentStream.endText();

            // Ajouter le watermark ESPRIT
            contentStream.beginText();
            contentStream.setFont(PDType1Font.HELVETICA_OBLIQUE, 8);
            contentStream.newLineAtOffset(page.getMediaBox().getWidth() - 200, 30);
            contentStream.showText("CV " + cv.getInstitution() + " - " + cv.getProgramType().getDisplayName());
            contentStream.endText();
        }
    }

    private int addSection(PDPageContentStream contentStream, String title, String content, int yOffset) throws IOException {
        if (content == null || content.isEmpty()) {
            return yOffset;
        }

        contentStream.beginText();
        contentStream.setFont(PDType1Font.HELVETICA_BOLD, 14);
        contentStream.newLineAtOffset(50, yOffset);
        contentStream.showText(title);
        contentStream.endText();

        contentStream.beginText();
        contentStream.setFont(PDType1Font.HELVETICA, 12);
        contentStream.newLineAtOffset(50, yOffset - 15);
        contentStream.showText(content);
        contentStream.endText();

        return yOffset - 30;
    }

    private int addEducationSection(PDPageContentStream contentStream, List<Education> educations, int yOffset) throws IOException {
        if (educations.isEmpty()) {
            return yOffset;
        }

        contentStream.beginText();
        contentStream.setFont(PDType1Font.HELVETICA_BOLD, 14);
        contentStream.newLineAtOffset(50, yOffset);
        contentStream.showText("Education");
        contentStream.endText();
        yOffset -= 15;

        contentStream.beginText();
        contentStream.setFont(PDType1Font.HELVETICA, 12);
        for (Education education : educations) {
            contentStream.newLineAtOffset(50, yOffset);
            String graduationDate = education.getGraduationDate() != null ?
                    education.getGraduationDate().format(DATE_FORMATTER) : "Present";
            contentStream.showText(education.getDegree() + " - " + education.getInstitution() +
                    " (" + graduationDate + ")");
            contentStream.newLine();
            yOffset -= 15;
        }
        contentStream.endText();
        return yOffset - 15;
    }

    private int addWorkExperienceSection(PDPageContentStream contentStream, List<WorkExperience> workExperiences, int yOffset) throws IOException {
        if (workExperiences.isEmpty()) {
            return yOffset;
        }

        contentStream.beginText();
        contentStream.setFont(PDType1Font.HELVETICA_BOLD, 14);
        contentStream.newLineAtOffset(50, yOffset);
        contentStream.showText("Work Experience");
        contentStream.endText();
        yOffset -= 15;

        contentStream.beginText();
        contentStream.setFont(PDType1Font.HELVETICA, 12);
        for (WorkExperience workExperience : workExperiences) {
            contentStream.newLineAtOffset(50, yOffset);
            String endDate = workExperience.getEndDate() != null ?
                    workExperience.getEndDate().format(DATE_FORMATTER) : "Present";
            contentStream.showText(workExperience.getJobTitle() + " - " +
                    workExperience.getCompany() + " (" +
                    workExperience.getStartDate().format(DATE_FORMATTER) +
                    " - " + endDate + ")");
            contentStream.newLineAtOffset(0, -15);
            if (workExperience.getDescription() != null) {
                contentStream.showText(workExperience.getDescription());
            }
            yOffset -= 30;
        }
        contentStream.endText();
        return yOffset - 15;
    }

    private int addProjectsSection(PDPageContentStream contentStream, List<Project> projects, int yOffset) throws IOException {
        if (projects.isEmpty()) {
            return yOffset;
        }

        contentStream.beginText();
        contentStream.setFont(PDType1Font.HELVETICA_BOLD, 14);
        contentStream.newLineAtOffset(50, yOffset);
        contentStream.showText("Projects");
        contentStream.endText();
        yOffset -= 15;

        contentStream.beginText();
        contentStream.setFont(PDType1Font.HELVETICA, 12);
        for (Project project : projects) {
            contentStream.newLineAtOffset(50, yOffset);
            contentStream.showText(project.getName());
            contentStream.newLineAtOffset(0, -15);
            if (project.getDescription() != null) {
                contentStream.showText(project.getDescription());
            }
            yOffset -= 30;
        }
        contentStream.endText();
        return yOffset - 15;
    }

    private void addProfileSpecificSections(PDPageContentStream contentStream, CV cv, int yOffset) throws IOException {
        switch (cv.getProgramType()) {
            case ENGINEERING_IT:
            case ENGINEERING_TELECOM:
                addITEngineeringSection(contentStream, cv, yOffset);
                break;
            case ENGINEERING_ELECTROMECH:
            case ENGINEERING_MECHATRONICS:
                addMechanicalEngineeringSection(contentStream, cv, yOffset);
                break;
            case ENGINEERING_CIVIL:
                addCivilEngineeringSection(contentStream, cv, yOffset);
                break;
            case LICENSE_BUSINESS_COMPUTING:
            case LICENSE_MATH_APPLIED:
                addTechnicalBusinessSection(contentStream, cv, yOffset);
                break;
            case MASTER_BUSINESS_ANALYTICS:
            case MASTER_MDSI:
                addBusinessAnalyticsSection(contentStream, cv, yOffset);
                break;
            case MASTER_CCA:
            case MASTER_FIND:
                addFinanceSection(contentStream, cv, yOffset);
                break;
            default:
                addDefaultSection(contentStream, cv, yOffset);
        }
    }

    private int addCertificatesSection(PDPageContentStream contentStream, List<Certificate> certificates, int yOffset) throws IOException {
        if (certificates.isEmpty()) {
            return yOffset;
        }

        contentStream.beginText();
        contentStream.setFont(PDType1Font.HELVETICA_BOLD, 14);
        contentStream.newLineAtOffset(50, yOffset);
        contentStream.showText("Certificates");
        contentStream.endText();
        yOffset -= 15;

        contentStream.beginText();
        contentStream.setFont(PDType1Font.HELVETICA, 12);
        for (Certificate certificate : certificates) {
            contentStream.newLineAtOffset(50, yOffset);
            String dateReceived = certificate.getDateReceived() != null ?
                    certificate.getDateReceived().format(DATE_FORMATTER) : "";
            contentStream.showText(certificate.getName() + " - " +
                    certificate.getInstitution() +
                    (dateReceived.isEmpty() ? "" : " (" + dateReceived + ")"));
            contentStream.newLine();
            yOffset -= 15;
        }
        contentStream.endText();
        return yOffset - 15;
    }

    private int addLanguagesSection(PDPageContentStream contentStream, List<Language> languages, int yOffset) throws IOException {
        if (languages.isEmpty()) {
            return yOffset;
        }

        contentStream.beginText();
        contentStream.setFont(PDType1Font.HELVETICA_BOLD, 14);
        contentStream.newLineAtOffset(50, yOffset);
        contentStream.showText("Languages");
        contentStream.endText();
        yOffset -= 15;

        contentStream.beginText();
        contentStream.setFont(PDType1Font.HELVETICA, 12);
        for (Language language : languages) {
            contentStream.newLineAtOffset(50, yOffset);
            contentStream.showText(language.getName() + " - " +
                    language.getProficiencyDescription());
            contentStream.newLine();
            yOffset -= 15;
        }
        contentStream.endText();
        return yOffset - 15;
    }

    private void addSkillsSection(PDPageContentStream contentStream, List<String> skills, int yOffset) throws IOException {
        if (skills.isEmpty()) {
            return;
        }

        contentStream.beginText();
        contentStream.setFont(PDType1Font.HELVETICA_BOLD, 14);
        contentStream.newLineAtOffset(50, yOffset);
        contentStream.showText("Skills");
        contentStream.endText();
        yOffset -= 15;

        contentStream.beginText();
        contentStream.setFont(PDType1Font.HELVETICA, 12);
        for (String skill : skills) {
            contentStream.newLineAtOffset(50, yOffset);
            contentStream.showText(skill);
            contentStream.newLine();
            yOffset -= 15;
        }
        contentStream.endText();
    }
}
==================================================

Fichier: src\main\java\com\example\stage\controller\WelcomeController.java
Chemin complet: C:\Users\Sh-Pc\Desktop\HomeFORNOW\KHEDMA\src\main\java\com\example\stage\controller\WelcomeController.java
-----
package com.example.stage.controller;

import javafx.animation.RotateTransition;
import javafx.application.Platform;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Scene;
import javafx.scene.image.ImageView;
import javafx.scene.layout.AnchorPane;
import javafx.stage.Stage;
import javafx.util.Duration;

import java.io.IOException;
import java.util.Timer;
import java.util.TimerTask;

public class WelcomeController {

    @FXML
    private ImageView loadingGear;

    @FXML
    private void initialize() {
        // Create a rotation animation for the loading gear
        RotateTransition rotateTransition = new RotateTransition(Duration.seconds(3), loadingGear);
        rotateTransition.setByAngle(360);
        rotateTransition.setCycleCount(RotateTransition.INDEFINITE);
        rotateTransition.play();

        // Timer to transition to the next page after 3 seconds
        Timer timer = new Timer();
        TimerTask task = new TimerTask() {
            private double progress = 0.0;

            @Override
            public void run() {
                progress += 0.01;

                if (progress >= 1.0) {
                    timer.cancel();
                    Platform.runLater(() -> showPage1());
                }
            }
        };
        timer.schedule(task, 0, 70);
    }

    private void showPage1() {
        Stage stage = (Stage) loadingGear.getScene().getWindow();
        try {
            AnchorPane page1 = FXMLLoader.load(getClass().getResource("/com/example/stage/page1.fxml"));
            Scene scene = new Scene(page1, 600, 900);
            stage.setScene(scene);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
==================================================

Fichier: src\main\java\com\example\stage\model\ProfileConfig.java
Chemin complet: C:\Users\Sh-Pc\Desktop\HomeFORNOW\KHEDMA\src\main\java\com\example\stage\model\ProfileConfig.java
-----
package com.example.stage.model;

public class ProfileConfig {
    private String name;
    private String description;
    private String[] requiredSkills;
    private String[] optionalSkills;
    private int minimumExperience;
    private String[] educationLevels;

    // Constructeur par dÃ©faut
    public ProfileConfig() {}

    // Getters et Setters
    public String getName() { return name; }
    public void setName(String name) { this.name = name; }

    public String getDescription() { return description; }
    public void setDescription(String description) { this.description = description; }

    public String[] getRequiredSkills() { return requiredSkills; }
    public void setRequiredSkills(String[] requiredSkills) { this.requiredSkills = requiredSkills; }

    public String[] getOptionalSkills() { return optionalSkills; }
    public void setOptionalSkills(String[] optionalSkills) { this.optionalSkills = optionalSkills; }

    public int getMinimumExperience() { return minimumExperience; }
    public void setMinimumExperience(int minimumExperience) { this.minimumExperience = minimumExperience; }

    public String[] getEducationLevels() { return educationLevels; }
    public void setEducationLevels(String[] educationLevels) { this.educationLevels = educationLevels; }
}
==================================================

Fichier: src\main\java\com\example\stage\model\ProfileType.java
Chemin complet: C:\Users\Sh-Pc\Desktop\HomeFORNOW\KHEDMA\src\main\java\com\example\stage\model\ProfileType.java
-----
package com.example.stage.model;

public class ProfileType {
}

==================================================

Fichier: src\main\java\com\example\stage\service\AIRecommendationService.java
Chemin complet: C:\Users\Sh-Pc\Desktop\HomeFORNOW\KHEDMA\src\main\java\com\example\stage\service\AIRecommendationService.java
-----
package com.example.stage.service;

import com.example.stage.model.CV;
import com.example.stage.model.CVAnalysis;
import com.example.stage.model.CVRecommendation;

public class AIRecommendationService {
    public enum ProfileType {
        ENGINEERING_INFO,      // GÃ©nie Informatique
        ENGINEERING_TELECOM,   // GÃ©nie des TÃ©lÃ©communications
        ENGINEERING_ELECTRO,   // GÃ©nie Ã‰lectromÃ©canique
        ENGINEERING_CIVIL,     // GÃ©nie Civil
        ENGINEERING_MECHA,     // GÃ©nie MÃ©catronique
        BUSINESS_LBC,         // Licence en Business Computing
        BUSINESS_LMAD,        // Licence en MathÃ©matiques AppliquÃ©es
        BUSINESS_LSG,         // Licence en Sciences de Gestion
        MASTER_BA,            // Master en Business Analytics
        MASTER_CCA,           // Master en ComptabilitÃ©
        MASTER_MDSI,          // Master en Management Digital
        MASTER_MKD,           // Master en Marketing Digital
        MASTER_FIND,          // Master en Finance Digitale
        MASTER_GAMMA          // Master en Gestion Actuarielle
    }

    public CVRecommendation generateRecommendations(CV cv, ProfileType profileType) {
        // Analyse du CV selon le profil
        CVAnalysis analysis = analyzeCVContent(cv);

        // GÃ©nÃ©ration de recommandations spÃ©cifiques au profil
        return generateProfileSpecificRecommendations(analysis, profileType);
    }

    private CVAnalysis analyzeCVContent(CV cv) {
        // Analyse du contenu actuel du CV
        // Identification des points forts et faibles
        return new CVAnalysis();
    }

    private CVRecommendation generateProfileSpecificRecommendations(CVAnalysis analysis, ProfileType profileType) {
        // GÃ©nÃ©ration de recommandations basÃ©es sur le type de profil
        return new CVRecommendation();
    }
}
==================================================

Fichier: src\main\java\com\example\stage\config\ProfileConfigurations.java
Chemin complet: C:\Users\Sh-Pc\Desktop\HomeFORNOW\KHEDMA\src\main\java\com\example\stage\config\ProfileConfigurations.java
-----
package com.example.stage.config;

import com.example.stage.model.ProfileConfig;
import java.util.Map;
import java.util.HashMap;

public class ProfileConfigurations {
    private Map<String, ProfileConfig> configurations;

    public ProfileConfigurations() {
        configurations = new HashMap<>();
        initializeBusinessConfigs();
        initializeMasterConfigs();
    }

    private void initializeBusinessConfigs() {
        ProfileConfig businessConfig = new ProfileConfig();
        businessConfig.setName("Business");
        businessConfig.setRequiredSkills(new String[]{"Management", "Communication", "Strategy"});
        configurations.put("business", businessConfig);
    }

    private void initializeMasterConfigs() {
        ProfileConfig masterConfig = new ProfileConfig();
        masterConfig.setName("Master");
        masterConfig.setRequiredSkills(new String[]{"Research", "Analysis", "Academic Writing"});
        configurations.put("master", masterConfig);
    }

    public ProfileConfig getConfig(String profile) {
        return configurations.get(profile.toLowerCase());
    }

    public Map<String, ProfileConfig> getAllConfigurations() {
        return new HashMap<>(configurations);
    }
}
==================================================

Fichier: src\main\java\com\example\stage\config\HuggingFaceConfig.java
Chemin complet: C:\Users\Sh-Pc\Desktop\HomeFORNOW\KHEDMA\src\main\java\com\example\stage\config\HuggingFaceConfig.java
-----
package com.example.stage.config;

public class HuggingFaceConfig {
    private static final HuggingFaceConfig instance = new HuggingFaceConfig();

    private String apiKey = "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";
    private String apiUrl = "https://api-inference.huggingface.co/models/";
    private String modelId = "gpt2";

    // Private constructor to prevent instantiation
    private HuggingFaceConfig() {}

    // Static method to get the instance
    public static HuggingFaceConfig getInstance() {
        return instance;
    }

    public String getApiKey() {
        return apiKey;
    }

    public void setApiKey(String apiKey) {
        if (apiKey != null && !apiKey.trim().isEmpty()) {
            this.apiKey = apiKey.trim();
        }
    }

    public String getApiUrl() {
        return apiUrl;
    }

    public void setApiUrl(String apiUrl) {
        if (apiUrl != null && !apiUrl.trim().isEmpty()) {
            this.apiUrl = apiUrl.trim();
        }
    }

    public String getModelId() {
        return modelId;
    }

    public void setModelId(String modelId) {
        if (modelId != null && !modelId.trim().isEmpty()) {
            this.modelId = modelId;
        }
    }

    // Helper method to get the complete API URL
    public String getCompleteApiUrl() {
        return apiUrl + modelId;
    }

    // Optional: Method to load configuration from a properties file
    public void loadConfig(String propertiesPath) {
        try {
            java.util.Properties props = new java.util.Properties();
            props.load(getClass().getClassLoader().getResourceAsStream(propertiesPath));

            setApiKey(props.getProperty("huggingface.api-key", apiKey));
            setApiUrl(props.getProperty("huggingface.api-url", apiUrl));
            setModelId(props.getProperty("huggingface.model-id", modelId));
        } catch (Exception e) {
            // Log error but use default values
            System.err.println("Failed to load HuggingFace configuration: " + e.getMessage());
        }
    }

    // Optional: Reset to default values
    public void resetToDefaults() {
        apiKey = "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";
        apiUrl = "https://api-inference.huggingface.co/models/";
        modelId = "gpt2";
    }
}
==================================================

Fichier: src\main\java\com\example\stage\client\HuggingFaceClient.java
Chemin complet: C:\Users\Sh-Pc\Desktop\HomeFORNOW\KHEDMA\src\main\java\com\example\stage\client\HuggingFaceClient.java
-----
package com.example.stage.client;

import com.example.stage.config.HuggingFaceConfig;
import okhttp3.*;
import java.io.IOException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class HuggingFaceClient {
    private static final Logger logger = LoggerFactory.getLogger(HuggingFaceClient.class);
    private final OkHttpClient client;
    private final HuggingFaceConfig config;
    private static final MediaType JSON = MediaType.get("application/json; charset=utf-8");

    public HuggingFaceClient(HuggingFaceConfig config) {
        this.client = new OkHttpClient.Builder()
                .build();
        this.config = config;
    }

    public String generateText(String prompt) throws IOException {
        try {
            RequestBody body = RequestBody.create(
                    String.format("{\"inputs\":\"%s\"}", prompt.replace("\"", "\\\"")),
                    JSON
            );

            Request request = new Request.Builder()
                    .url(config.getApiUrl() + config.getModelId())
                    .post(body)
                    .addHeader("Authorization", "Bearer " + config.getApiKey())
                    .build();

            try (Response response = client.newCall(request).execute()) {
                if (!response.isSuccessful()) {
                    logger.error("API call failed with code: {}", response.code());
                    throw new IOException("Unexpected code " + response);
                }
                return response.body().string();
            }
        } catch (Exception e) {
            logger.error("Error generating text: {}", e.getMessage());
            throw new IOException("Failed to generate text", e);
        }
    }
}
==================================================

Fichier: src\main\java\com\example\stage\ai\AIResponseParser.java
Chemin complet: C:\Users\Sh-Pc\Desktop\HomeFORNOW\KHEDMA\src\main\java\com\example\stage\ai\AIResponseParser.java
-----
package com.example.stage.ai;

import com.example.stage.model.CVAnalysis;
import java.util.Arrays;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class AIResponseParser {
    // Constantes pour les patterns de reconnaissance
    private static final String OVERALL_PATTERN = "(?i)Overall.*?:(.+?)(?=\\n|$)";
    private static final String PRESENTATION_PATTERN = "(?i)Presentation.*?:(.+?)(?=\\n\\n|$)";
    private static final String SKILLS_PATTERN = "(?i)Skills.*?:(.+?)(?=\\n\\n|$)";
    private static final String EXPERIENCE_PATTERN = "(?i)Experience.*?:(.+?)(?=\\n\\n|$)";
    private static final String STRENGTHS_PATTERN = "(?i)Strengths?:([\\s\\S]*?)(?=\\n\\n|Weaknesses|Areas for Improvement|$)";
    private static final String WEAKNESSES_PATTERN = "(?i)(Weaknesses|Areas for Improvement):([\\s\\S]*?)(?=\\n\\n|Recommendations|$)";
    private static final String RECOMMENDATIONS_PATTERN = "(?i)Recommendations:([\\s\\S]*?)(?=\\n\\n|Career Paths|$)";
    private static final String CAREER_PATHS_PATTERN = "(?i)Career Paths:([\\s\\S]*?)(?=\\n\\n|$)";

    public CVAnalysis parseAnalysisResponse(String aiResponse) {
        if (aiResponse == null || aiResponse.trim().isEmpty()) {
            throw new IllegalArgumentException("AI response cannot be null or empty");
        }

        CVAnalysis analysis = new CVAnalysis();
        analysis.setRawAnalysis(aiResponse);

        // Extraire les diffÃ©rentes parties de l'analyse
        extractOverallScore(aiResponse, analysis);
        extractPresentationAnalysis(aiResponse, analysis);
        extractSkillsAnalysis(aiResponse, analysis);
        extractExperienceAnalysis(aiResponse, analysis);
        extractListItems(aiResponse, STRENGTHS_PATTERN, analysis::addStrength);
        extractListItems(aiResponse, WEAKNESSES_PATTERN, analysis::addWeakness);
        extractListItems(aiResponse, RECOMMENDATIONS_PATTERN, analysis::addRecommendation);
        extractListItems(aiResponse, CAREER_PATHS_PATTERN, analysis::addCareerPath);

        return analysis;
    }

    private void extractOverallScore(String response, CVAnalysis analysis) {
        String score = extractPattern(response, OVERALL_PATTERN);
        if (score != null) {
            analysis.setOverallScore(score.trim());
        }
    }

    private void extractPresentationAnalysis(String response, CVAnalysis analysis) {
        String presentation = extractPattern(response, PRESENTATION_PATTERN);
        if (presentation != null) {
            analysis.setPresentationAnalysis(presentation.trim());
        }
    }

    private void extractSkillsAnalysis(String response, CVAnalysis analysis) {
        String skills = extractPattern(response, SKILLS_PATTERN);
        if (skills != null) {
            analysis.setSkillsAnalysis(skills.trim());
        }
    }

    private void extractExperienceAnalysis(String response, CVAnalysis analysis) {
        String experience = extractPattern(response, EXPERIENCE_PATTERN);
        if (experience != null) {
            analysis.setExperienceAnalysis(experience.trim());
        }
    }

    private void extractListItems(String response, String pattern, java.util.function.Consumer<String> consumer) {
        String content = extractPattern(response, pattern);
        if (content != null) {
            Arrays.stream(content.split("(?m)^[-â€¢*]\\s*"))
                    .map(String::trim)
                    .filter(s -> !s.isEmpty())
                    .forEach(consumer);
        }
    }

    private String extractPattern(String text, String pattern) {
        Pattern p = Pattern.compile(pattern);
        Matcher m = p.matcher(text);
        if (m.find()) {
            return m.groupCount() > 1 ? m.group(2) : m.group(1);
        }
        return null;
    }
}
==================================================

Fichier: src\main\java\com\example\stage\ai\AIPromptBuilder.java
Chemin complet: C:\Users\Sh-Pc\Desktop\HomeFORNOW\KHEDMA\src\main\java\com\example\stage\ai\AIPromptBuilder.java
-----
package com.example.stage.ai;

import com.example.stage.model.CV;
import java.time.format.DateTimeFormatter;

public class AIPromptBuilder {
    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern("yyyy-MM-dd");

    public String buildAnalysisPrompt(CV cv) {
        StringBuilder prompt = new StringBuilder();
        prompt.append("Analyze this CV for a professional position\n\n");

        // Personal Information
        prompt.append("Personal Information:\n");
        prompt.append("Name: ").append(cv.getName()).append("\n");
        prompt.append("Email: ").append(cv.getEmail()).append("\n");
        prompt.append("Phone: ").append(cv.getPhone()).append("\n");
        prompt.append("Address: ").append(cv.getAddress()).append("\n");
        if (cv.getLinkedin() != null && !cv.getLinkedin().isEmpty()) {
            prompt.append("LinkedIn: ").append(cv.getLinkedin()).append("\n");
        }
        if (cv.getPortfolio() != null && !cv.getPortfolio().isEmpty()) {
            prompt.append("Portfolio: ").append(cv.getPortfolio()).append("\n");
        }

        // Professional Summary
        if (cv.getSummary() != null && !cv.getSummary().isEmpty()) {
            prompt.append("\nProfessional Summary:\n");
            prompt.append(cv.getSummary()).append("\n");
        }

        // Education
        if (!cv.getEducations().isEmpty()) {
            prompt.append("\nEducation:\n");
            cv.getEducations().forEach(edu -> {
                prompt.append("- ").append(edu.getDegree())
                        .append(" from ").append(edu.getInstitution());
                if (edu.getGraduationDate() != null) {
                    prompt.append(" (")
                            .append(edu.getGraduationDate().format(DATE_FORMATTER))
                            .append(")");
                }
                prompt.append("\n");
            });
        }

        // Work Experience
        if (!cv.getWorkExperiences().isEmpty()) {
            prompt.append("\nWork Experience:\n");
            cv.getWorkExperiences().forEach(exp -> {
                prompt.append("- ").append(exp.getJobTitle())
                        .append(" at ").append(exp.getCompany());
                if (exp.getStartDate() != null) {
                    prompt.append(" (")
                            .append(exp.getStartDate().format(DATE_FORMATTER));
                    if (exp.getEndDate() != null) {
                        prompt.append(" - ")
                                .append(exp.getEndDate().format(DATE_FORMATTER));
                    }
                    prompt.append(")");
                }
                prompt.append("\n");
                if (exp.getDescription() != null && !exp.getDescription().isEmpty()) {
                    prompt.append("  ").append(exp.getDescription()).append("\n");
                }
            });
        }

        // Skills
        if (!cv.getSkills().isEmpty()) {
            prompt.append("\nSkills:\n");
            cv.getSkills().forEach(skill -> prompt.append("- ").append(skill).append("\n"));
        }

        // Projects
        if (!cv.getProjects().isEmpty()) {
            prompt.append("\nProjects:\n");
            cv.getProjects().forEach(project -> {
                prompt.append("- ").append(project.getName()).append("\n");
                if (project.getDescription() != null && !project.getDescription().isEmpty()) {
                    prompt.append("  ").append(project.getDescription()).append("\n");
                }
            });
        }

        // Languages
        if (!cv.getLanguages().isEmpty()) {
            prompt.append("\nLanguages:\n");
            cv.getLanguages().forEach(lang -> {
                prompt.append("- ").append(lang.getName())
                        .append(": ").append(lang.getProficiencyDescription())
                        .append("\n");
            });
        }
        // Analysis Request
        prompt.append("\nPlease provide a detailed analysis of this CV, including:\n");
        prompt.append("1. Overall presentation and organization\n");
        prompt.append("2. Strength of qualifications and experience\n");
        prompt.append("3. Skills assessment and relevance\n");
        prompt.append("4. Areas for improvement\n");
        prompt.append("5. Specific recommendations for enhancement\n");
        prompt.append("6. Potential career paths based on the profile\n");

        return prompt.toString();
    }
}
==================================================

Fichier: src\main\java\com\example\stage\model\CVRecommendation.java
Chemin complet: C:\Users\Sh-Pc\Desktop\HomeFORNOW\KHEDMA\src\main\java\com\example\stage\model\CVRecommendation.java
-----
package com.example.stage.model;

import java.util.ArrayList;
import java.util.List;

public class CVRecommendation {
    private String profileName;
    private double matchScore;
    private List<String> matchedSkills;
    private List<String> missingSkills;
    private List<String> suggestions;
    private String detailedAnalysis;

    public CVRecommendation() {
        this.matchedSkills = new ArrayList<>();
        this.missingSkills = new ArrayList<>();
        this.suggestions = new ArrayList<>();
    }

    // Getters et Setters
    public String getProfileName() { return profileName; }
    public void setProfileName(String profileName) { this.profileName = profileName; }

    public double getMatchScore() { return matchScore; }
    public void setMatchScore(double matchScore) { this.matchScore = matchScore; }

    public List<String> getMatchedSkills() { return new ArrayList<>(matchedSkills); }
    public void setMatchedSkills(List<String> matchedSkills) {
        this.matchedSkills = new ArrayList<>(matchedSkills);
    }

    public List<String> getMissingSkills() { return new ArrayList<>(missingSkills); }
    public void setMissingSkills(List<String> missingSkills) {
        this.missingSkills = new ArrayList<>(missingSkills);
    }

    public List<String> getSuggestions() { return new ArrayList<>(suggestions); }
    public void setSuggestions(List<String> suggestions) {
        this.suggestions = new ArrayList<>(suggestions);
    }

    public String getDetailedAnalysis() { return detailedAnalysis; }
    public void setDetailedAnalysis(String detailedAnalysis) {
        this.detailedAnalysis = detailedAnalysis;
    }

    // MÃ©thodes utilitaires
    public void addMatchedSkill(String skill) {
        if (skill != null && !skill.trim().isEmpty()) {
            this.matchedSkills.add(skill.trim());
        }
    }

    public void addMissingSkill(String skill) {
        if (skill != null && !skill.trim().isEmpty()) {
            this.missingSkills.add(skill.trim());
        }
    }

    public void addSuggestion(String suggestion) {
        if (suggestion != null && !suggestion.trim().isEmpty()) {
            this.suggestions.add(suggestion.trim());
        }
    }
}
==================================================

Fichier: src\main\java\com\example\stage\model\CVAnalysis.java
Chemin complet: C:\Users\Sh-Pc\Desktop\HomeFORNOW\KHEDMA\src\main\java\com\example\stage\model\CVAnalysis.java
-----
package com.example.stage.model;

import java.time.LocalDateTime;
import java.util.*;

public class CVAnalysis {
    // Scores et mÃ©triques
    private double completenessScore;
    private double presentationScore;
    private double experienceScore;
    private double educationScore;
    private double skillsRelevanceScore;
    private Map<String, Double> skillsMatchScore;

    // Analyses textuelles
    private List<String> suggestions;
    private List<String> strengths;
    private List<String> improvements;
    private String overallFeedback;

    // Analyses spÃ©cifiques
    private Map<String, String> sectionFeedback;
    private List<String> missingElements;
    private List<String> recommendedSkills;

    // MÃ©tadonnÃ©es
    private LocalDateTime analysisDate;
    private String analysisVersion;
    private String jobMarketTarget;

    // Constructeur
    public CVAnalysis() {
        this.skillsMatchScore = new HashMap<>();
        this.suggestions = new ArrayList<>();
        this.strengths = new ArrayList<>();
        this.improvements = new ArrayList<>();
        this.sectionFeedback = new HashMap<>();
        this.missingElements = new ArrayList<>();
        this.recommendedSkills = new ArrayList<>();
        this.analysisDate = LocalDateTime.now();
        this.analysisVersion = "1.0";
    }

    // Getters et Setters avec validation
    public double getCompletenessScore() {
        return completenessScore;
    }

    public void setCompletenessScore(double completenessScore) {
        if (completenessScore < 0 || completenessScore > 100) {
            throw new IllegalArgumentException("Completeness score must be between 0 and 100");
        }
        this.completenessScore = completenessScore;
    }

    public double getPresentationScore() {
        return presentationScore;
    }

    public void setPresentationScore(double presentationScore) {
        if (presentationScore < 0 || presentationScore > 100) {
            throw new IllegalArgumentException("Presentation score must be between 0 and 100");
        }
        this.presentationScore = presentationScore;
    }

    public double getExperienceScore() {
        return experienceScore;
    }

    public void setExperienceScore(double experienceScore) {
        if (experienceScore < 0 || experienceScore > 100) {
            throw new IllegalArgumentException("Experience score must be between 0 and 100");
        }
        this.experienceScore = experienceScore;
    }

    public double getEducationScore() {
        return educationScore;
    }

    public void setEducationScore(double educationScore) {
        if (educationScore < 0 || educationScore > 100) {
            throw new IllegalArgumentException("Education score must be between 0 and 100");
        }
        this.educationScore = educationScore;
    }

    public double getSkillsRelevanceScore() {
        return skillsRelevanceScore;
    }

    public void setSkillsRelevanceScore(double skillsRelevanceScore) {
        if (skillsRelevanceScore < 0 || skillsRelevanceScore > 100) {
            throw new IllegalArgumentException("Skills relevance score must be between 0 and 100");
        }
        this.skillsRelevanceScore = skillsRelevanceScore;
    }

    public Map<String, Double> getSkillsMatchScore() {
        return new HashMap<>(skillsMatchScore);
    }

    public void setSkillsMatchScore(Map<String, Double> skillsMatchScore) {
        this.skillsMatchScore = new HashMap<>(skillsMatchScore);
    }

    public void addSkillScore(String skill, double score) {
        if (score < 0 || score > 100) {
            throw new IllegalArgumentException("Skill score must be between 0 and 100");
        }
        this.skillsMatchScore.put(skill, score);
    }

    public List<String> getSuggestions() {
        return new ArrayList<>(suggestions);
    }

    public void setSuggestions(List<String> suggestions) {
        this.suggestions = new ArrayList<>(suggestions);
    }

    public void addSuggestion(String suggestion) {
        if (suggestion != null && !suggestion.trim().isEmpty()) {
            this.suggestions.add(suggestion.trim());
        }
    }

    public List<String> getStrengths() {
        return new ArrayList<>(strengths);
    }

    public void setStrengths(List<String> strengths) {
        this.strengths = new ArrayList<>(strengths);
    }

    public void addStrength(String strength) {
        if (strength != null && !strength.trim().isEmpty()) {
            this.strengths.add(strength.trim());
        }
    }

    public List<String> getImprovements() {
        return new ArrayList<>(improvements);
    }

    public void setImprovements(List<String> improvements) {
        this.improvements = new ArrayList<>(improvements);
    }

    public void addImprovement(String improvement) {
        if (improvement != null && !improvement.trim().isEmpty()) {
            this.improvements.add(improvement.trim());
        }
    }

    public String getOverallFeedback() {
        return overallFeedback;
    }

    public void setOverallFeedback(String overallFeedback) {
        this.overallFeedback = overallFeedback;
    }

    public Map<String, String> getSectionFeedback() {
        return new HashMap<>(sectionFeedback);
    }

    public void setSectionFeedback(Map<String, String> sectionFeedback) {
        this.sectionFeedback = new HashMap<>(sectionFeedback);
    }

    public void addSectionFeedback(String section, String feedback) {
        if (section != null && feedback != null) {
            this.sectionFeedback.put(section.trim(), feedback.trim());
        }
    }

    public List<String> getMissingElements() {
        return new ArrayList<>(missingElements);
    }

    public void setMissingElements(List<String> missingElements) {
        this.missingElements = new ArrayList<>(missingElements);
    }

    public void addMissingElement(String element) {
        if (element != null && !element.trim().isEmpty()) {
            this.missingElements.add(element.trim());
        }
    }

    public List<String> getRecommendedSkills() {
        return new ArrayList<>(recommendedSkills);
    }

    public void setRecommendedSkills(List<String> recommendedSkills) {
        this.recommendedSkills = new ArrayList<>(recommendedSkills);
    }

    public void addRecommendedSkill(String skill) {
        if (skill != null && !skill.trim().isEmpty()) {
            this.recommendedSkills.add(skill.trim());
        }
    }

    public LocalDateTime getAnalysisDate() {
        return analysisDate;
    }

    public String getAnalysisVersion() {
        return analysisVersion;
    }

    public void setAnalysisVersion(String analysisVersion) {
        this.analysisVersion = analysisVersion;
    }

    public String getJobMarketTarget() {
        return jobMarketTarget;
    }

    public void setJobMarketTarget(String jobMarketTarget) {
        this.jobMarketTarget = jobMarketTarget;
    }

    // MÃ©thodes utilitaires
    public double getOverallScore() {
        return (completenessScore + presentationScore + experienceScore +
                educationScore + skillsRelevanceScore) / 5.0;
    }

    public boolean isComplete() {
        return completenessScore >= 80.0;
    }

    public List<String> getPriorityImprovements() {
        List<String> priorities = new ArrayList<>();
        if (completenessScore < 70) priorities.add("Complete missing information");
        if (presentationScore < 70) priorities.add("Improve CV presentation");
        if (skillsRelevanceScore < 70) priorities.add("Update skills section");
        return priorities;
    }

    // Override toString pour l'affichage
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("CV Analysis Report (").append(analysisDate).append(")\n");
        sb.append("Version: ").append(analysisVersion).append("\n\n");

        sb.append("Overall Score: ").append(String.format("%.2f%%", getOverallScore())).append("\n");
        sb.append("Completeness: ").append(String.format("%.2f%%", completenessScore)).append("\n");
        sb.append("Presentation: ").append(String.format("%.2f%%", presentationScore)).append("\n");
        sb.append("Experience: ").append(String.format("%.2f%%", experienceScore)).append("\n");
        sb.append("Education: ").append(String.format("%.2f%%", educationScore)).append("\n");
        sb.append("Skills Relevance: ").append(String.format("%.2f%%", skillsRelevanceScore)).append("\n\n");

        if (!strengths.isEmpty()) {
            sb.append("Strengths:\n");
            strengths.forEach(s -> sb.append("+ ").append(s).append("\n"));
            sb.append("\n");
        }

        if (!improvements.isEmpty()) {
            sb.append("Areas for Improvement:\n");
            improvements.forEach(i -> sb.append("- ").append(i).append("\n"));
            sb.append("\n");
        }

        if (!suggestions.isEmpty()) {
            sb.append("Suggestions:\n");
            suggestions.forEach(s -> sb.append("* ").append(s).append("\n"));
        }

        return sb.toString();
    }

    // Override equals et hashCode
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        CVAnalysis that = (CVAnalysis) o;
        return Objects.equals(analysisDate, that.analysisDate) &&
                Objects.equals(analysisVersion, that.analysisVersion);
    }

    @Override
    public int hashCode() {
        return Objects.hash(analysisDate, analysisVersion);
    }

    public void addWeakness(String s) {
    }

    public void setOverallScore(String trim) {
    }

    public void setPresentationAnalysis(String trim) {
    }

    public void setExperienceAnalysis(String trim) {
    }

    public void setSkillsAnalysis(String trim) {
    }

    public void setRawAnalysis(String aiResponse) {
    }

    public void addRecommendation(String s) {
    }

    public void addCareerPath(String s) {
    }
}
==================================================

Fichier: src\main\resources\logback.xml
Chemin complet: C:\Users\Sh-Pc\Desktop\HomeFORNOW\KHEDMA\src\main\resources\logback.xml
-----
<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
        </encoder>
    </appender>

    <appender name="FILE" class="ch.qos.logback.core.FileAppender">
        <file>logs/application.log</file>
        <encoder>
            <pattern>%date %level [%thread] %logger{10} [%file:%line] %msg%n</pattern>
        </encoder>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="FILE" />
    </root>
</configuration>
==================================================

Fichier: src\main\java\com\example\stage\util\LocaleConstants.java
Chemin complet: C:\Users\Sh-Pc\Desktop\HomeFORNOW\KHEDMA\src\main\java\com\example\stage\util\LocaleConstants.java
-----
package com.example.stage.util;

import java.util.Locale;
import java.util.Map;
import java.util.Collections;
import java.util.HashMap;

public final class LocaleConstants {
    public static final Locale ARABIC = Locale.forLanguageTag("ar");

    private static final Map<String, Locale> SUPPORTED_LOCALES;

    static {
        Map<String, Locale> locales = new HashMap<>();
        locales.put("English", Locale.ENGLISH);
        locales.put("French", Locale.FRENCH);
        locales.put("German", Locale.GERMAN);
        locales.put("Arabic", ARABIC);
        SUPPORTED_LOCALES = Collections.unmodifiableMap(locales);
    }

    public static Map<String, Locale> getSupportedLocales() {
        return SUPPORTED_LOCALES;
    }

    private LocaleConstants() {
        // EmpÃªcher l'instanciation
    }
}
==================================================

Fichier: pom.xml
Chemin complet: C:\Users\Sh-Pc\Desktop\HomeFORNOW\KHEDMA\pom.xml
-----
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.example</groupId>
    <artifactId>stage</artifactId>
    <version>1.0-SNAPSHOT</version>
    <name>stage</name>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>21</java.version>
        <javafx.version>21</javafx.version>
        <junit.version>5.10.2</junit.version>
    </properties>

    <dependencies>
        <!-- JavaFX Dependencies -->
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-controls</artifactId>
            <version>${javafx.version}</version>
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-fxml</artifactId>
            <version>${javafx.version}</version>
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-web</artifactId>
            <version>${javafx.version}</version>
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-swing</artifactId>
            <version>${javafx.version}</version>
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-media</artifactId>
            <version>${javafx.version}</version>
        </dependency>

        <!-- PDF Generation -->
        <dependency>
            <groupId>org.apache.pdfbox</groupId>
            <artifactId>pdfbox</artifactId>
            <version>2.0.27</version>
        </dependency>

        <!-- UI Controls -->
        <dependency>
            <groupId>org.controlsfx</groupId>
            <artifactId>controlsfx</artifactId>
            <version>11.2.1</version>
        </dependency>

        <!-- Logging -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>2.0.11</version>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>1.4.14</version>
        </dependency>
        <dependency>
            <groupId>org.apache.pdfbox</groupId>
            <artifactId>pdfbox</artifactId>
            <version>2.0.27</version>
        </dependency>
        <!-- HTTP Client -->
        <dependency>
            <groupId>com.squareup.okhttp3</groupId>
            <artifactId>okhttp</artifactId>
            <version>4.12.0</version>
        </dependency>
        <dependency>
            <groupId>org.mindrot</groupId>
            <artifactId>jbcrypt</artifactId>
            <version>0.4</version>
        </dependency>

        <!-- Testing -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.13.0</version>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                    <compilerArgs>
                        <arg>--enable-preview</arg>
                    </compilerArgs>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.openjfx</groupId>
                <artifactId>javafx-maven-plugin</artifactId>
                <version>0.0.8</version>
                <configuration>
                    <mainClass>com.example.stage.CVBuilder</mainClass>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>
==================================================

Fichier: src\main\resources\com\example\stage\i18n\messages_en.properties
Chemin complet: C:\Users\Sh-Pc\Desktop\HomeFORNOW\KHEDMA\src\main\resources\com\example\stage\i18n\messages_en.properties
-----
# English translations
translate=Translate
back=Back
skills=Skills
projects=Projects
certificates=Certificates
languages=Languages
generate_pdf=Generate PDF
personal_information=Personal Information
full_name=Full Name
email=Email
phone=Phone
address=Address
linkedin=LinkedIn
portfolio=Portfolio
summary_objective=Summary / Objective
education=Education
work_experience=Work Experience
add_education=Add Education
add_experience=Add Experience
project_name=Project Name
project_description=Project Description
certificate_name=Certificate Name
institution=Institution
date_of_receipt=Date of Receipt
language=Language
proficiency_level=Proficiency Level
next=Next
auto_fill=Auto Fill

# Additional translations
degree=Degree
graduation_date=Graduation Date
job_title=Job Title
company=Company
start_date=Start Date
end_date=End Date
description=Description
add_work_experience=Add Work Experience

# Validation messages
name_required=Name is required
email_required=Email is required
phone_required=Phone number is required
invalid_email=Invalid email format
invalid_phone=Invalid phone format
invalid_linkedin=Invalid LinkedIn URL format

# Help messages
summary_help=Write a brief overview of your professional background and career objectives

==================================================

Fichier: src\main\resources\com\example\stage\i18n\messages_ar.properties
Chemin complet: C:\Users\Sh-Pc\Desktop\HomeFORNOW\KHEDMA\src\main\resources\com\example\stage\i18n\messages_ar.properties
-----
# Arabic translations
translate=ØªØ±Ø¬Ù…Ø©
back=Ø±Ø¬ÙˆØ¹
skills=Ø§Ù„Ù…Ù‡Ø§Ø±Ø§Øª
projects=Ø§Ù„Ù…Ø´Ø§Ø±ÙŠØ¹
certificates=Ø§Ù„Ø´Ù‡Ø§Ø¯Ø§Øª
languages=Ø§Ù„Ù„ØºØ§Øª
generate_pdf=Ø¥Ù†Ø´Ø§Ø¡ PDF
personal_information=Ø§Ù„Ù…Ø¹Ù„ÙˆÙ…Ø§Øª Ø§Ù„Ø´Ø®ØµÙŠØ©
full_name=Ø§Ù„Ø§Ø³Ù… Ø§Ù„ÙƒØ§Ù…Ù„
email=Ø§Ù„Ø¨Ø±ÙŠØ¯ Ø§Ù„Ø¥Ù„ÙƒØªØ±ÙˆÙ†ÙŠ
phone=Ø§Ù„Ù‡Ø§ØªÙ
address=Ø§Ù„Ø¹Ù†ÙˆØ§Ù†
linkedin=Ù„ÙŠÙ†ÙƒØ¯ Ø¥Ù†
portfolio=Ø§Ù„Ù…Ø­ÙØ¸Ø©
summary_objective=Ø§Ù„Ù…Ù„Ø®Øµ / Ø§Ù„Ù‡Ø¯Ù
education=Ø§Ù„ØªØ¹Ù„ÙŠÙ…
work_experience=Ø§Ù„Ø®Ø¨Ø±Ø© Ø§Ù„Ù…Ù‡Ù†ÙŠØ©
add_education=Ø¥Ø¶Ø§ÙØ© ØªØ¹Ù„ÙŠÙ…
add_experience=Ø¥Ø¶Ø§ÙØ© Ø®Ø¨Ø±Ø©
project_name=Ø§Ø³Ù… Ø§Ù„Ù…Ø´Ø±ÙˆØ¹
project_description=ÙˆØµÙ Ø§Ù„Ù…Ø´Ø±ÙˆØ¹
certificate_name=Ø§Ø³Ù… Ø§Ù„Ø´Ù‡Ø§Ø¯Ø©
institution=Ø§Ù„Ù…Ø¤Ø³Ø³Ø©
date_of_receipt=ØªØ§Ø±ÙŠØ® Ø§Ù„Ø§Ø³ØªÙ„Ø§Ù…
language=Ø§Ù„Ù„ØºØ©
proficiency_level=Ù…Ø³ØªÙˆÙ‰ Ø§Ù„ÙƒÙØ§Ø¡Ø©
next=Ø§Ù„ØªØ§Ù„ÙŠ
auto_fill=Ù…Ù„Ø¡ ØªÙ„Ù‚Ø§Ø¦ÙŠ

# Additional translations
degree=Ø§Ù„Ø´Ù‡Ø§Ø¯Ø©
graduation_date=ØªØ§Ø±ÙŠØ® Ø§Ù„ØªØ®Ø±Ø¬
job_title=Ø§Ù„Ù…Ø³Ù…Ù‰ Ø§Ù„ÙˆØ¸ÙŠÙÙŠ
company=Ø§Ù„Ø´Ø±ÙƒØ©
start_date=ØªØ§Ø±ÙŠØ® Ø§Ù„Ø¨Ø¯Ø¡
end_date=ØªØ§Ø±ÙŠØ® Ø§Ù„Ø§Ù†ØªÙ‡Ø§Ø¡
description=Ø§Ù„ÙˆØµÙ
add_work_experience=Ø¥Ø¶Ø§ÙØ© Ø®Ø¨Ø±Ø© Ù…Ù‡Ù†ÙŠØ©

# Validation messages
name_required=Ø§Ù„Ø§Ø³Ù… Ù…Ø·Ù„ÙˆØ¨
email_required=Ø§Ù„Ø¨Ø±ÙŠØ¯ Ø§Ù„Ø¥Ù„ÙƒØªØ±ÙˆÙ†ÙŠ Ù…Ø·Ù„ÙˆØ¨
phone_required=Ø±Ù‚Ù… Ø§Ù„Ù‡Ø§ØªÙ Ù…Ø·Ù„ÙˆØ¨
invalid_email=ØµÙŠØºØ© Ø§Ù„Ø¨Ø±ÙŠØ¯ Ø§Ù„Ø¥Ù„ÙƒØªØ±ÙˆÙ†ÙŠ ØºÙŠØ± ØµØ­ÙŠØ­Ø©
invalid_phone=ØµÙŠØºØ© Ø±Ù‚Ù… Ø§Ù„Ù‡Ø§ØªÙ ØºÙŠØ± ØµØ­ÙŠØ­Ø©
invalid_linkedin=ØµÙŠØºØ© Ø±Ø§Ø¨Ø· Ù„ÙŠÙ†ÙƒØ¯ Ø¥Ù† ØºÙŠØ± ØµØ­ÙŠØ­Ø©

# Help messages
summary_help=Ø§ÙƒØªØ¨ Ù†Ø¨Ø°Ø© Ù…Ø®ØªØµØ±Ø© Ø¹Ù† Ø®Ù„ÙÙŠØªÙƒ Ø§Ù„Ù…Ù‡Ù†ÙŠØ© ÙˆØ£Ù‡Ø¯Ø§ÙÙƒ Ø§Ù„ÙˆØ¸ÙŠÙÙŠØ©

# Direction and alignment
direction=rtl
text.align=right
==================================================

Fichier: src\main\resources\com\example\stage\i18n\messages_de.properties
Chemin complet: C:\Users\Sh-Pc\Desktop\HomeFORNOW\KHEDMA\src\main\resources\com\example\stage\i18n\messages_de.properties
-----
# German translations
translate=Übersetzen
back=Zurück
skills=Fähigkeiten
projects=Projekte
certificates=Zertifikate
languages=Sprachen
generate_pdf=PDF Erstellen
personal_information=Persönliche Informationen
full_name=Vollständiger Name
email=E-Mail
phone=Telefon
address=Adresse
linkedin=LinkedIn
portfolio=Portfolio
summary_objective=Zusammenfassung / Ziel
education=Bildung
work_experience=Berufserfahrung
add_education=Bildung Hinzufügen
add_experience=Erfahrung Hinzufügen
project_name=Projektname
project_description=Projektbeschreibung
certificate_name=Zertifikatname
institution=Institution
date_of_receipt=Empfangsdatum
language=Sprache
proficiency_level=Kompetenzniveau
next=Weiter
auto_fill=Auto-Ausfüllen

# Additional German translations
degree=Abschluss
graduation_date=Abschlussdatum
job_title=Berufsbezeichnung
company=Unternehmen
start_date=Startdatum
end_date=Enddatum
description=Beschreibung
add_work_experience=Berufserfahrung Hinzufügen

# Validation messages
name_required=Name ist erforderlich
email_required=E-Mail ist erforderlich
phone_required=Telefonnummer ist erforderlich
invalid_email=Ungültiges E-Mail-Format
invalid_phone=Ungültige Telefonnummer
invalid_linkedin=Ungültige LinkedIn-URL

# Help messages
summary_help=Schreiben Sie eine kurze Übersicht über Ihren beruflichen Werdegang und Ihre Karriereziele
# messages_de.properties (Allemand)

enter_skill=Fähigkeit eingeben
enter_project_name=Projektname eingeben
enter_project_description=Projektbeschreibung eingeben
enter_certificate_name=Zertifikatsname eingeben
enter_institution=Institution eingeben
enter_language=Sprache eingeben
remove=Entfernen
level=Niveau
date=Datum

==================================================

Fichier: src\main\resources\com\example\stage\i18n\messages_fr.properties
Chemin complet: C:\Users\Sh-Pc\Desktop\HomeFORNOW\KHEDMA\src\main\resources\com\example\stage\i18n\messages_fr.properties
-----
translate=Traduire
back=Retour
skills=CompÃƒÂ©tences
projects=Projets
certificates=Certificats
languages=Langues
generate_pdf=GÃƒÂ©nÃƒÂ©rer PDF
personal_information=Informations Personnelles
full_name=Nom Complet
email=Email
phone=TÃƒÂ©lÃƒÂ©phone
address=Adresse
linkedin=LinkedIn
portfolio=Portfolio
summary_objective=RÃƒÂ©sumÃƒÂ© / Objectif
education=ÃƒÂ‰ducation
work_experience=ExpÃƒÂ©rience Professionnelle
add_education=Ajouter ÃƒÂ‰ducation
add_experience=Ajouter ExpÃƒÂ©rience
project_name=Nom du Projet
project_description=Description du Projet
certificate_name=Nom du Certificat
institution=Institution
date_of_receipt=Date de RÃƒÂ©ception
language=Langue
proficiency_level=Niveau de CompÃƒÂ©tence
next=Suivant
auto_fill=autofill
==================================================

Fichier: src\main\resources\com\example\stage\i18n\messages_en.properties
Chemin complet: C:\Users\Sh-Pc\Desktop\HomeFORNOW\KHEDMA\src\main\resources\com\example\stage\i18n\messages_en.properties
-----
# English translations
translate=Translate
back=Back
skills=Skills
projects=Projects
certificates=Certificates
languages=Languages
generate_pdf=Generate PDF
personal_information=Personal Information
full_name=Full Name
email=Email
phone=Phone
address=Address
linkedin=LinkedIn
portfolio=Portfolio
summary_objective=Summary / Objective
education=Education
work_experience=Work Experience
add_education=Add Education
add_experience=Add Experience
project_name=Project Name
project_description=Project Description
certificate_name=Certificate Name
institution=Institution
date_of_receipt=Date of Receipt
language=Language
proficiency_level=Proficiency Level
next=Next
auto_fill=Auto Fill

# Additional translations
degree=Degree
graduation_date=Graduation Date
job_title=Job Title
company=Company
start_date=Start Date
end_date=End Date
description=Description
add_work_experience=Add Work Experience

# Validation messages
name_required=Name is required
email_required=Email is required
phone_required=Phone number is required
invalid_email=Invalid email format
invalid_phone=Invalid phone format
invalid_linkedin=Invalid LinkedIn URL format

# Help messages
summary_help=Write a brief overview of your professional background and career objectives

==================================================

Fichier: src\main\resources\application.properties
Chemin complet: C:\Users\Sh-Pc\Desktop\HomeFORNOW\KHEDMA\src\main\resources\application.properties
-----
# Configuration HuggingFace
huggingface.api-url=https://api-inference.huggingface.co/models/
huggingface.model-id=gpt2

# Configuration Base de données
spring.datasource.url=jdbc:mysql://localhost:3306/cv_generator
spring.datasource.username=root
spring.datasource.password=your-password
spring.jpa.hibernate.ddl-auto=update

# Configuration Server
server.port=8080
spring.application.name=cv-generator

# Configuration des profils ESPRIT
esprit.engineering.profiles=INFO,TELECOM,ELECTRO,CIVIL,MECHA
esprit.business.profiles=LBC,LMAD,LSG
esprit.master.profiles=BA,CCA,MDSI,MKD,FIND,GAMMA

# Configuration Logging
logging.level.root=INFO
logging.level.com.example.stage=DEBUG

# Configuration langue par défaut
spring.web.locale=fr
spring.web.locale-resolver=fixed

# Configuration maximum upload size
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB

# Configuration des templates CV
cv.templates.path=classpath:templates/cv/

# Configuration de l'IA
ai.model.type=gpt-4
ai.temperature=0.7
ai.max-tokens=2000
==================================================

